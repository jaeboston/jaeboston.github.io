---
  title: "Optimization with transaction cost"
  author: "Jae Song"
  date: 2019-04-25
  description: "Backtest"
  type: page
  draft: false
---



```python
import sys
!{sys.executable} -m pip install -r requirements.txt
```



```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pickle
import gzip
import bz2
from statsmodels.formula.api import ols
from scipy.stats import gaussian_kde
import scipy
import scipy.sparse
import patsy
from statistics import median
import datetime
```

## Barra data

We’ll be using factor data that is generated by Barra.  This will be good practice because Barra data is used throughout the industry.  

Note that we've pre-processed the raw barra data files and stored the data into pickle files. The alternative would be to load the original data, and perform the parsing each time.  Since parsing and pre-processing takes time, we recommend doing the pre-processing once and saving the pre-processed data for later use in your backtest.

Choose the number of years to use for the backtest.  The data is available for years 2003 to 2008 inclusive.


```python
barra_dir = '../../data/project_8_barra/'
```


```python
!ls {barra_dir}
```

    covariance.2003.pickle	pandas-frames.2003.pickle  price.2003.pickle
    covariance.2004.pickle	pandas-frames.2004.pickle  price.2004.pickle
    covariance.2005.pickle	pandas-frames.2005.pickle  price.2005.pickle
    covariance.2006.pickle	pandas-frames.2006.pickle  price.2006.pickle
    covariance.2007.pickle	pandas-frames.2007.pickle  price.2007.pickle
    covariance.2008.pickle	pandas-frames.2008.pickle  price.2008.pickle



```python
data = {}
for year in [2003]:
    fil = barra_dir + "pandas-frames." + str(year) + ".pickle"
    data.update(pickle.load( open( fil, "rb" ) ))
    
covariance = {}
for year in [2003]:
    fil = barra_dir + "covariance." + str(year) + ".pickle"
    covariance.update(pickle.load( open(fil, "rb" ) ))
    
daily_return = {}
for year in [2003, 2004]:
    fil = barra_dir + "price." + str(year) + ".pickle"
    daily_return.update(pickle.load( open(fil, "rb" ) ))
```

# Optimization with Transaction costs

In this lesson, we’ll show you how to incorporate transaction costs into portfolio optimization.  This will give your backtest a more realistic measure of your alpha’s performance.  In addition, we’ll show you some additional ways to design your optimization with efficiency in mind.  This is really helpful when  backtesting, because having reasonably shorter runtimes allows you to test and iterate on your alphas more quickly.

Notice that the frames variale is a dictionary, where the keys are strings representing each business day.

## View the Barra data

We'll take a look at the value stored for a single day (it's a data frame).

As a general reminder of best practices, remember to check what unit of measure your data is in. In some cases, the unit of measure isn’t available in the documentation, so you’ll want to inspect the data to see what makes sense.

For instance, there are volatility fields that are large enough that we can assume they are in percentage units, as opposed to decimal values.  In other cases, when we look at daily volume, we may not have documentation about whether the units are in number of shares or in dollars. One way to find this out is to spot check a single stock on a single day, and cross-reference with another source, such as Bloomberg or Yahoo Finance.
Remember to inspect the data before you use it, as it will help you derive more meaningful results in your portfolio optimization, and in your backtest.

Remember to inspect the data before you use it, as it will help you derive more meaningful results in your portfolio optimization, and in your backtest.

In the exercise, we'll re-scale the data before using it, and there will be comments to point out when we re-scale the data.  So don't worry about adjusting anything here, just take a look to get familiar with the data.


```python
data.keys()
```




    dict_keys(['20030102', '20030103', '20030106', '20030107', '20030108', '20030109', '20030110', '20030113', '20030114', '20030115', '20030116', '20030117', '20030121', '20030122', '20030123', '20030124', '20030127', '20030128', '20030129', '20030130', '20030131', '20030203', '20030204', '20030205', '20030206', '20030207', '20030210', '20030211', '20030212', '20030213', '20030214', '20030218', '20030219', '20030220', '20030221', '20030224', '20030225', '20030226', '20030227', '20030228', '20030303', '20030304', '20030305', '20030306', '20030307', '20030310', '20030311', '20030312', '20030313', '20030314', '20030317', '20030318', '20030319', '20030320', '20030321', '20030324', '20030325', '20030326', '20030327', '20030328', '20030331', '20030401', '20030402', '20030403', '20030404', '20030407', '20030408', '20030409', '20030410', '20030411', '20030414', '20030415', '20030416', '20030417', '20030421', '20030422', '20030423', '20030424', '20030425', '20030428', '20030429', '20030430', '20030501', '20030502', '20030505', '20030506', '20030507', '20030508', '20030509', '20030512', '20030513', '20030514', '20030515', '20030516', '20030519', '20030520', '20030521', '20030522', '20030523', '20030527', '20030528', '20030529', '20030530', '20030602', '20030603', '20030604', '20030605', '20030606', '20030609', '20030610', '20030611', '20030612', '20030613', '20030616', '20030617', '20030618', '20030619', '20030620', '20030623', '20030624', '20030625', '20030626', '20030627', '20030630', '20030701', '20030702', '20030703', '20030707', '20030708', '20030709', '20030710', '20030711', '20030714', '20030715', '20030716', '20030717', '20030718', '20030721', '20030722', '20030723', '20030724', '20030725', '20030728', '20030729', '20030730', '20030731', '20030801', '20030804', '20030805', '20030806', '20030807', '20030808', '20030811', '20030812', '20030813', '20030814', '20030815', '20030818', '20030819', '20030820', '20030821', '20030822', '20030825', '20030826', '20030827', '20030828', '20030829', '20030902', '20030903', '20030904', '20030905', '20030908', '20030909', '20030910', '20030911', '20030912', '20030915', '20030916', '20030917', '20030918', '20030919', '20030922', '20030923', '20030924', '20030925', '20030926', '20030929', '20030930', '20031001', '20031002', '20031003', '20031006', '20031007', '20031008', '20031009', '20031010', '20031013', '20031014', '20031015', '20031016', '20031017', '20031020', '20031021', '20031022', '20031023', '20031024', '20031027', '20031028', '20031029', '20031030', '20031031', '20031103', '20031104', '20031105', '20031106', '20031107', '20031110', '20031111', '20031112', '20031113', '20031114', '20031117', '20031118', '20031119', '20031120', '20031121', '20031124', '20031125', '20031126', '20031128', '20031201', '20031202', '20031203', '20031204', '20031205', '20031208', '20031209', '20031210', '20031211', '20031212', '20031215', '20031216', '20031217', '20031218', '20031219', '20031222', '20031223', '20031224', '20031226', '20031229', '20031230', '20031231'])




```python
data['20030102'].head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>USFASTD_1DREVRSL</th>
      <th>USFASTD_AERODEF</th>
      <th>USFASTD_AIRLINES</th>
      <th>USFASTD_ALUMSTEL</th>
      <th>USFASTD_APPAREL</th>
      <th>USFASTD_AUTO</th>
      <th>USFASTD_BANKS</th>
      <th>USFASTD_BETA</th>
      <th>USFASTD_BEVTOB</th>
      <th>...</th>
      <th>BidAskSpread</th>
      <th>DailyVolume</th>
      <th>ADTCA_30</th>
      <th>IssuerMarketCap</th>
      <th>Yield</th>
      <th>TotalRisk</th>
      <th>SpecRisk</th>
      <th>HistBeta</th>
      <th>PredBeta</th>
      <th>DataDate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>USA0001</td>
      <td>-0.837</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.441677e+10</td>
      <td>0.292740</td>
      <td>22.940188</td>
      <td>16.825603</td>
      <td>-0.000285</td>
      <td>0.194528</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>1</th>
      <td>USA0011</td>
      <td>-0.530</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.758417e+09</td>
      <td>0.000000</td>
      <td>35.056218</td>
      <td>26.040331</td>
      <td>0.000025</td>
      <td>0.150303</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>2</th>
      <td>USA0031</td>
      <td>0.109</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.018</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>2900.0</td>
      <td>NaN</td>
      <td>6.256875e+10</td>
      <td>2.350000</td>
      <td>25.585521</td>
      <td>18.842191</td>
      <td>0.133644</td>
      <td>0.364634</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>3</th>
      <td>USA0062</td>
      <td>-0.259</td>
      <td>0.434</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.378</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2.046586e+10</td>
      <td>3.125000</td>
      <td>34.361884</td>
      <td>30.552489</td>
      <td>-0.021132</td>
      <td>0.274658</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>4</th>
      <td>USA0071</td>
      <td>-0.394</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.665</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.332</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.988087e+10</td>
      <td>2.633889</td>
      <td>22.893482</td>
      <td>15.466688</td>
      <td>-0.001328</td>
      <td>0.246267</td>
      <td>20030102</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 92 columns</p>
</div>




```python
data['20030102'].shape
```




    (12252, 92)



#### Factors

Note that the data fields that start with the prefix U-S-F-A-S-T are factor exposures, one column for each factor.  We will use some of these as alpha factors, and the rest as risk factors.  The reason this makes sense is that, for the time periods in which we’re back-testing, some of these factors were able to produce better than average returns.  Barra works with its clients (funds) and gathers information about alphas that worked in the past.  These were calculated on historical data to produce the factor exposure data found in the Barra data.

![alt text](barra_field_factor_exposure.png)

## Factors

Here's a partial list of the barra factors in our dataset and their definitions.  These are collected from documentation by Barra.  There are style factors and industry factors.  The industry factors will be used as risk factors.  You can consider using the style factors as alpha factors.  Any factors not used as alpha factors can be included in the risk factors category.

#### Style factors
* beta: Describes market risk that cannot be explained by the Country factor. The Beta factor is typically the most important style factor. We calculate Beta by time-series regression of stock excess returns against the market return.
* 1 day reversal
* dividend yield: Describes differences in stock returns attributable to stock's historical and predicted dividend-to-price ratios.
* downside risk (maximum drawdown)
* earnings quality:  Describes stock return differences due to the accrual components of earnings.
* earnings yield: Describes return differences based on a company’s earnings relative to its price. Earnings Yield is considered by many investors to be a strong value signal. The most important descriptor in this factor is the analyst-predicted 12-month earnings-to-price ratio.
* growth: Differentiates stocks based on their prospects for sales or earnings growth. The most important descriptor in this factor is the analyst predicted long-term earnings growth. Other descriptors include sales and earnings growth over the previous five years.
* leverage: Describes return differences between high and low-leverage stocks. The descriptors within this style factor include market leverage, book leverage, and debt-to-assets ratio.
* liquidity: Describes return differences due to relative trading activity. The descriptors for this factor are based on the fraction of total shares outstanding that trade over a recent window.
* long-term reversal: Describes common variation in returns related to a long-term (five years ex. recent thirteen months) stock price behavior.
* management quality
* Mid capitalization: Describes non-linearity in the payoff to the Size factor across the market-cap spectrum. This factor is based on a single raw descriptor: the cube of the Size exposure. However, because this raw descriptor is highly collinear with the Size factor, it is orthogonalized with respect to Size. This procedure does not affect the fit of the model, but does mitigate the confounding effects of collinearity, while preserving an intuitive meaning for the Size factor. As described by Menchero (2010), the Mid Capitalization factor roughly captures the risk of a “barbell portfolio” that is long mid-cap stocks and short small-cap and large-cap stocks.
* Momentum – Differentiates stocks based on their performance over the trailing 12 months. When computing Momentum exposures, we exclude the most recent returns in order to avoid the effects of short-term reversal. The Momentum factor is often the second strongest factor in the model, although sometimes it may surpass Beta in importance.
* Profitability – Combines profitability measures that characterize efficiency of a firm's operations and total activities.
* Residual Volatility – Measures the idiosyncratic volatility anomaly. It has three descriptors: (a) the volatility of daily excess returns, (b) the volatility of daily residual returns, and (c) the cumulative range of the stock over the last 12 months. Since these descriptors tend to be highly collinear with the Beta factor, the Residual Volatility factor is orthogonalized with respect to the Beta and Size factors.
* seasonality
* sentiment
* Size – Represents a strong source of equity return covariance, and captures return differences between large-cap and small-cap stocks. We measure Size by the log of market capitalization.
* Short term reversal
* Value
* Prospect -- is a function of skewness and maximum drawdown.
* Management Quality -- is a function of the following: 
    * Asset Growth: Annual reported company assets are regressed against time over the past five fiscal years. The slope coefficient is then divided by the average annual assets to obtain the asset growth.
    * Issuance Growth Annual reported company number of shares outstanding regressed against time over the past five fiscal years. The slope coefficient is then divided by the average annual number of shares outstanding.
    * Capital Expenditure Growth: Annual reported company capital expenditures are regressed against time over the past five fiscal years. The slope coefficient is then divided by the average annual capital expenditures to obtain the capital expenditures growth.
    * Capital Expenditure: The most recent capital expenditures are scaled by the average of capital expenditures over the last five fiscal years.



#### Industry Factors
* aerospace and defense
* airlines
* aluminum and steel
* apparel
* Automotive
* banks
* beta (market)
* beverage and tobacco
* biotech & life science
* building products
* chemicals
* construction & engineering
* construction & machinery
* construction materials
* commercial equipment
* computer & electronics
* commercial services
* industrial conglomerates
* containers (forest, paper, & packaging)
* distributors
* diversified financials
* electrical equipment
* electrical utility
* food & household products & personal
* food & staples retailing
* gas & multi-utilities
* healthcare equipment and services
* health services
* home building
* household durables
* industry machinery
* non-life insurance
* leisure products
* leisure services
* life insurance
* managed healthcare
* multi-utilities
* oil & gas conversion
* oil & gas drilling
* oil & gas equipment
* oil and gas export
* paper
* pharmaceuticals
* precious metals
* personal products
* real estate
* restaurants
* road & rail
* semiconductors
* semiconductors equipment
* software
* telecommunications
* transportation
* wireless
* SPTY\* and SPLTY\* are various industries


```python
data['20030102'].columns
```




    Index(['Barrid', 'USFASTD_1DREVRSL', 'USFASTD_AERODEF', 'USFASTD_AIRLINES',
           'USFASTD_ALUMSTEL', 'USFASTD_APPAREL', 'USFASTD_AUTO', 'USFASTD_BANKS',
           'USFASTD_BETA', 'USFASTD_BEVTOB', 'USFASTD_BIOLIFE', 'USFASTD_BLDGPROD',
           'USFASTD_CHEM', 'USFASTD_CNSTENG', 'USFASTD_CNSTMACH',
           'USFASTD_CNSTMATL', 'USFASTD_COMMEQP', 'USFASTD_COMPELEC',
           'USFASTD_COMSVCS', 'USFASTD_CONGLOM', 'USFASTD_CONTAINR',
           'USFASTD_DISTRIB', 'USFASTD_DIVFIN', 'USFASTD_DIVYILD',
           'USFASTD_DWNRISK', 'USFASTD_EARNQLTY', 'USFASTD_EARNYILD',
           'USFASTD_ELECEQP', 'USFASTD_ELECUTIL', 'USFASTD_FOODPROD',
           'USFASTD_FOODRET', 'USFASTD_GASUTIL', 'USFASTD_GROWTH',
           'USFASTD_HLTHEQP', 'USFASTD_HLTHSVCS', 'USFASTD_HOMEBLDG',
           'USFASTD_HOUSEDUR', 'USFASTD_INDMACH', 'USFASTD_INDMOM',
           'USFASTD_INSURNCE', 'USFASTD_INTERNET', 'USFASTD_LEISPROD',
           'USFASTD_LEISSVCS', 'USFASTD_LEVERAGE', 'USFASTD_LIFEINS',
           'USFASTD_LIQUIDTY', 'USFASTD_LTREVRSL', 'USFASTD_MEDIA',
           'USFASTD_MGDHLTH', 'USFASTD_MGMTQLTY', 'USFASTD_MIDCAP',
           'USFASTD_MOMENTUM', 'USFASTD_MULTUTIL', 'USFASTD_OILGSCON',
           'USFASTD_OILGSDRL', 'USFASTD_OILGSEQP', 'USFASTD_OILGSEXP',
           'USFASTD_PAPER', 'USFASTD_PHARMA', 'USFASTD_PRECMTLS', 'USFASTD_PROFIT',
           'USFASTD_PROSPECT', 'USFASTD_PSNLPROD', 'USFASTD_REALEST',
           'USFASTD_RESTAUR', 'USFASTD_RESVOL', 'USFASTD_ROADRAIL',
           'USFASTD_SEASON', 'USFASTD_SEMICOND', 'USFASTD_SEMIEQP',
           'USFASTD_SENTMT', 'USFASTD_SIZE', 'USFASTD_SOFTWARE',
           'USFASTD_SPLTYRET', 'USFASTD_SPTYCHEM', 'USFASTD_SPTYSTOR',
           'USFASTD_STREVRSL', 'USFASTD_TELECOM', 'USFASTD_TRADECO',
           'USFASTD_TRANSPRT', 'USFASTD_VALUE', 'USFASTD_WIRELESS', 'BidAskSpread',
           'DailyVolume', 'ADTCA_30', 'IssuerMarketCap', 'Yield', 'TotalRisk',
           'SpecRisk', 'HistBeta', 'PredBeta', 'DataDate'],
          dtype='object')



## covariance of factors

Let's look at the covariance of the factors.


```python
covariance.keys()
```




    dict_keys(['20030102', '20030103', '20030106', '20030107', '20030108', '20030109', '20030110', '20030113', '20030114', '20030115', '20030116', '20030117', '20030121', '20030122', '20030123', '20030124', '20030127', '20030128', '20030129', '20030130', '20030131', '20030203', '20030204', '20030205', '20030206', '20030207', '20030210', '20030211', '20030212', '20030213', '20030214', '20030218', '20030219', '20030220', '20030221', '20030224', '20030225', '20030226', '20030227', '20030228', '20030303', '20030304', '20030305', '20030306', '20030307', '20030310', '20030311', '20030312', '20030313', '20030314', '20030317', '20030318', '20030319', '20030320', '20030321', '20030324', '20030325', '20030326', '20030327', '20030328', '20030331', '20030401', '20030402', '20030403', '20030404', '20030407', '20030408', '20030409', '20030410', '20030411', '20030414', '20030415', '20030416', '20030417', '20030421', '20030422', '20030423', '20030424', '20030425', '20030428', '20030429', '20030430', '20030501', '20030502', '20030505', '20030506', '20030507', '20030508', '20030509', '20030512', '20030513', '20030514', '20030515', '20030516', '20030519', '20030520', '20030521', '20030522', '20030523', '20030527', '20030528', '20030529', '20030530', '20030602', '20030603', '20030604', '20030605', '20030606', '20030609', '20030610', '20030611', '20030612', '20030613', '20030616', '20030617', '20030618', '20030619', '20030620', '20030623', '20030624', '20030625', '20030626', '20030627', '20030630', '20030701', '20030702', '20030703', '20030707', '20030708', '20030709', '20030710', '20030711', '20030714', '20030715', '20030716', '20030717', '20030718', '20030721', '20030722', '20030723', '20030724', '20030725', '20030728', '20030729', '20030730', '20030731', '20030801', '20030804', '20030805', '20030806', '20030807', '20030808', '20030811', '20030812', '20030813', '20030814', '20030815', '20030818', '20030819', '20030820', '20030821', '20030822', '20030825', '20030826', '20030827', '20030828', '20030829', '20030902', '20030903', '20030904', '20030905', '20030908', '20030909', '20030910', '20030911', '20030912', '20030915', '20030916', '20030917', '20030918', '20030919', '20030922', '20030923', '20030924', '20030925', '20030926', '20030929', '20030930', '20031001', '20031002', '20031003', '20031006', '20031007', '20031008', '20031009', '20031010', '20031013', '20031014', '20031015', '20031016', '20031017', '20031020', '20031021', '20031022', '20031023', '20031024', '20031027', '20031028', '20031029', '20031030', '20031031', '20031103', '20031104', '20031105', '20031106', '20031107', '20031110', '20031111', '20031112', '20031113', '20031114', '20031117', '20031118', '20031119', '20031120', '20031121', '20031124', '20031125', '20031126', '20031128', '20031201', '20031202', '20031203', '20031204', '20031205', '20031208', '20031209', '20031210', '20031211', '20031212', '20031215', '20031216', '20031217', '20031218', '20031219', '20031222', '20031223', '20031224', '20031226', '20031229', '20031230', '20031231'])



View the data for a single day.  Notice that the factors are listed in two columns, followed by the covariance between them.  We'll use this data later to create a factor covariance matrix.


```python
covariance['20030102'].head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Factor1</th>
      <th>Factor2</th>
      <th>VarCovar</th>
      <th>DataDate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>USFASTD_1DREVRSL</td>
      <td>USFASTD_1DREVRSL</td>
      <td>3.665058</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>1</th>
      <td>USFASTD_1DREVRSL</td>
      <td>USFASTD_BETA</td>
      <td>4.042588</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>2</th>
      <td>USFASTD_1DREVRSL</td>
      <td>USFASTD_DIVYILD</td>
      <td>-0.061494</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>3</th>
      <td>USFASTD_1DREVRSL</td>
      <td>USFASTD_DWNRISK</td>
      <td>-0.147935</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>4</th>
      <td>USFASTD_1DREVRSL</td>
      <td>USFASTD_EARNQLTY</td>
      <td>0.083602</td>
      <td>20030102</td>
    </tr>
  </tbody>
</table>
</div>



## Daily returns


```python
daily_return.keys()
```




    dict_keys(['20030102', '20030103', '20030106', '20030107', '20030108', '20030109', '20030110', '20030113', '20030114', '20030115', '20030116', '20030117', '20030121', '20030122', '20030123', '20030124', '20030127', '20030128', '20030129', '20030130', '20030131', '20030203', '20030204', '20030205', '20030206', '20030207', '20030210', '20030211', '20030212', '20030213', '20030214', '20030218', '20030219', '20030220', '20030221', '20030224', '20030225', '20030226', '20030227', '20030228', '20030303', '20030304', '20030305', '20030306', '20030307', '20030310', '20030311', '20030312', '20030313', '20030314', '20030317', '20030318', '20030319', '20030320', '20030321', '20030324', '20030325', '20030326', '20030327', '20030328', '20030331', '20030401', '20030402', '20030403', '20030404', '20030407', '20030408', '20030409', '20030410', '20030411', '20030414', '20030415', '20030416', '20030417', '20030421', '20030422', '20030423', '20030424', '20030425', '20030428', '20030429', '20030430', '20030501', '20030502', '20030505', '20030506', '20030507', '20030508', '20030509', '20030512', '20030513', '20030514', '20030515', '20030516', '20030519', '20030520', '20030521', '20030522', '20030523', '20030527', '20030528', '20030529', '20030530', '20030602', '20030603', '20030604', '20030605', '20030606', '20030609', '20030610', '20030611', '20030612', '20030613', '20030616', '20030617', '20030618', '20030619', '20030620', '20030623', '20030624', '20030625', '20030626', '20030627', '20030630', '20030701', '20030702', '20030703', '20030707', '20030708', '20030709', '20030710', '20030711', '20030714', '20030715', '20030716', '20030717', '20030718', '20030721', '20030722', '20030723', '20030724', '20030725', '20030728', '20030729', '20030730', '20030731', '20030801', '20030804', '20030805', '20030806', '20030807', '20030808', '20030811', '20030812', '20030813', '20030814', '20030815', '20030818', '20030819', '20030820', '20030821', '20030822', '20030825', '20030826', '20030827', '20030828', '20030829', '20030902', '20030903', '20030904', '20030905', '20030908', '20030909', '20030910', '20030911', '20030912', '20030915', '20030916', '20030917', '20030918', '20030919', '20030922', '20030923', '20030924', '20030925', '20030926', '20030929', '20030930', '20031001', '20031002', '20031003', '20031006', '20031007', '20031008', '20031009', '20031010', '20031013', '20031014', '20031015', '20031016', '20031017', '20031020', '20031021', '20031022', '20031023', '20031024', '20031027', '20031028', '20031029', '20031030', '20031031', '20031103', '20031104', '20031105', '20031106', '20031107', '20031110', '20031111', '20031112', '20031113', '20031114', '20031117', '20031118', '20031119', '20031120', '20031121', '20031124', '20031125', '20031126', '20031128', '20031201', '20031202', '20031203', '20031204', '20031205', '20031208', '20031209', '20031210', '20031211', '20031212', '20031215', '20031216', '20031217', '20031218', '20031219', '20031222', '20031223', '20031224', '20031226', '20031229', '20031230', '20031231', '20040102', '20040105', '20040106', '20040107', '20040108', '20040109', '20040112', '20040113', '20040114', '20040115', '20040116', '20040120', '20040121', '20040122', '20040123', '20040126', '20040127', '20040128', '20040129', '20040130', '20040202', '20040203', '20040204', '20040205', '20040206', '20040209', '20040210', '20040211', '20040212', '20040213', '20040217', '20040218', '20040219', '20040220', '20040223', '20040224', '20040225', '20040226', '20040227', '20040301', '20040302', '20040303', '20040304', '20040305', '20040308', '20040309', '20040310', '20040311', '20040312', '20040315', '20040316', '20040317', '20040318', '20040319', '20040322', '20040323', '20040324', '20040325', '20040326', '20040329', '20040330', '20040331', '20040401', '20040402', '20040405', '20040406', '20040407', '20040408', '20040412', '20040413', '20040414', '20040415', '20040416', '20040419', '20040420', '20040421', '20040422', '20040423', '20040426', '20040427', '20040428', '20040429', '20040430', '20040503', '20040504', '20040505', '20040506', '20040507', '20040510', '20040511', '20040512', '20040513', '20040514', '20040517', '20040518', '20040519', '20040520', '20040521', '20040524', '20040525', '20040526', '20040527', '20040528', '20040601', '20040602', '20040603', '20040604', '20040607', '20040608', '20040609', '20040610', '20040614', '20040615', '20040616', '20040617', '20040618', '20040621', '20040622', '20040623', '20040624', '20040625', '20040628', '20040629', '20040630', '20040701', '20040702', '20040706', '20040707', '20040708', '20040709', '20040712', '20040713', '20040714', '20040715', '20040716', '20040719', '20040720', '20040721', '20040722', '20040723', '20040726', '20040727', '20040728', '20040729', '20040730', '20040802', '20040803', '20040804', '20040805', '20040806', '20040809', '20040810', '20040811', '20040812', '20040813', '20040816', '20040817', '20040818', '20040819', '20040820', '20040823', '20040824', '20040825', '20040826', '20040827', '20040830', '20040831', '20040901', '20040902', '20040903', '20040907', '20040908', '20040909', '20040910', '20040913', '20040914', '20040915', '20040916', '20040917', '20040920', '20040921', '20040922', '20040923', '20040924', '20040927', '20040928', '20040929', '20040930', '20041001', '20041004', '20041005', '20041006', '20041007', '20041008', '20041011', '20041012', '20041013', '20041014', '20041015', '20041018', '20041019', '20041020', '20041021', '20041022', '20041025', '20041026', '20041027', '20041028', '20041029', '20041101', '20041102', '20041103', '20041104', '20041105', '20041108', '20041109', '20041110', '20041111', '20041112', '20041115', '20041116', '20041117', '20041118', '20041119', '20041122', '20041123', '20041124', '20041126', '20041129', '20041130', '20041201', '20041202', '20041203', '20041206', '20041207', '20041208', '20041209', '20041210', '20041213', '20041214', '20041215', '20041216', '20041217', '20041220', '20041221', '20041222', '20041223', '20041227', '20041228', '20041229', '20041230', '20041231'])




```python
daily_return['20030102'].head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>DlyReturn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>80</th>
      <td>USA0001</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>81</th>
      <td>USA0011</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>82</th>
      <td>USA0031</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>83</th>
      <td>USA0062</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>84</th>
      <td>USA0071</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>



## Add date for returns

We'll be dealing with two different dates; to help us keep track, let's add an additional column in the daily_return dataframes that stores the date of the returns.


```python
tmp_date = '20030102'
tmp = daily_return[tmp_date]
```


```python
print(type(tmp))
tmp.head()
```

    <class 'pandas.core.frame.DataFrame'>





<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>DlyReturn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>80</th>
      <td>USA0001</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>81</th>
      <td>USA0011</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>82</th>
      <td>USA0031</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>83</th>
      <td>USA0062</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>84</th>
      <td>USA0071</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>




```python
tmp_n_rows = tmp.shape[0]
print(tmp_n_rows)
```

    12252



```python
pd.Series([tmp_date]*tmp_n_rows)
```




    0        20030102
    1        20030102
    2        20030102
    3        20030102
    4        20030102
    5        20030102
    6        20030102
    7        20030102
    8        20030102
    9        20030102
    10       20030102
    11       20030102
    12       20030102
    13       20030102
    14       20030102
    15       20030102
    16       20030102
    17       20030102
    18       20030102
    19       20030102
    20       20030102
    21       20030102
    22       20030102
    23       20030102
    24       20030102
    25       20030102
    26       20030102
    27       20030102
    28       20030102
    29       20030102
               ...   
    12222    20030102
    12223    20030102
    12224    20030102
    12225    20030102
    12226    20030102
    12227    20030102
    12228    20030102
    12229    20030102
    12230    20030102
    12231    20030102
    12232    20030102
    12233    20030102
    12234    20030102
    12235    20030102
    12236    20030102
    12237    20030102
    12238    20030102
    12239    20030102
    12240    20030102
    12241    20030102
    12242    20030102
    12243    20030102
    12244    20030102
    12245    20030102
    12246    20030102
    12247    20030102
    12248    20030102
    12249    20030102
    12250    20030102
    12251    20030102
    Length: 12252, dtype: object




```python
tmp['DlyReturnDate'] = pd.Series([tmp_date]*tmp_n_rows)
```


```python
tmp.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>DlyReturn</th>
      <th>DlyReturnDate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>80</th>
      <td>USA0001</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>81</th>
      <td>USA0011</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>82</th>
      <td>USA0031</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>83</th>
      <td>USA0062</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>84</th>
      <td>USA0071</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
  </tbody>
</table>
</div>



## Quiz: add daily return date to each dataframe in daily_return dictionary

Name the column `DlyReturnDate`.
**Hint**: create a list containing copies of the date, then create a pandas series.


```python
for DlyReturnDate, df in daily_return.items():
    # TODO
    n_rows = df.shape[0]
    df['DlyReturnDate'] = pd.Series([DlyReturnDate]*n_rows)
```


```python
# check results

daily_return['20030102'].head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>DlyReturn</th>
      <th>DlyReturnDate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>80</th>
      <td>USA0001</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>81</th>
      <td>USA0011</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>82</th>
      <td>USA0031</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>83</th>
      <td>USA0062</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>84</th>
      <td>USA0071</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
  </tbody>
</table>
</div>



## Adjust dates to account for trade execution

The data stored in `data` and `covariance` are used to choose the optimal portfolio, whereas the data in `daily_return` represents the the returns that the optimized portfolio would realize, but only after we've received the data, then chosen the optimal holdings, and allowed a day to trade into the optimal holdings.  In other words, if we use the data from `data` and `covariance` that is collected at the end of Monday, we'll use portfolio optimization to choose the optimal holdings based on this data, perhaps after hours on Monday.  Then on Tuesday, we'll have a day to execute trades to adjust the portfolio into the optimized positions.  Then on Wednesday, we'll realize the returns using those optimal holdings.


```python
# Example of what we want
data_date_l = sorted(data.keys())
```


```python
return_date_l = sorted(daily_return.keys())
```


```python
len(data_date_l)
```




    252




```python
len(return_date_l)
```




    504




```python
return_date_l_shifted = return_date_l[2:len(data) + 2]
```


```python
len(return_date_l_shifted)
```




    252




```python
# data date
data_date_l[0]
```




    '20030102'




```python
# returns date
return_date_l_shifted[0]
```




    '20030106'




```python
print(daily_return['20030102'].columns)
```

    Index(['Barrid', 'DlyReturn', 'DlyReturnDate'], dtype='object')



```python
tmp = data['20030102'].merge(daily_return['20030102'], on="Barrid")
print(tmp.shape)
tmp.head()

```

    (12252, 94)





<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>USFASTD_1DREVRSL</th>
      <th>USFASTD_AERODEF</th>
      <th>USFASTD_AIRLINES</th>
      <th>USFASTD_ALUMSTEL</th>
      <th>USFASTD_APPAREL</th>
      <th>USFASTD_AUTO</th>
      <th>USFASTD_BANKS</th>
      <th>USFASTD_BETA</th>
      <th>USFASTD_BEVTOB</th>
      <th>...</th>
      <th>ADTCA_30</th>
      <th>IssuerMarketCap</th>
      <th>Yield</th>
      <th>TotalRisk</th>
      <th>SpecRisk</th>
      <th>HistBeta</th>
      <th>PredBeta</th>
      <th>DataDate</th>
      <th>DlyReturn</th>
      <th>DlyReturnDate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>USA0001</td>
      <td>-0.837</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>3.441677e+10</td>
      <td>0.292740</td>
      <td>22.940188</td>
      <td>16.825603</td>
      <td>-0.000285</td>
      <td>0.194528</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>1</th>
      <td>USA0011</td>
      <td>-0.530</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>1.758417e+09</td>
      <td>0.000000</td>
      <td>35.056218</td>
      <td>26.040331</td>
      <td>0.000025</td>
      <td>0.150303</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>2</th>
      <td>USA0031</td>
      <td>0.109</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.018</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>6.256875e+10</td>
      <td>2.350000</td>
      <td>25.585521</td>
      <td>18.842191</td>
      <td>0.133644</td>
      <td>0.364634</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>3</th>
      <td>USA0062</td>
      <td>-0.259</td>
      <td>0.434</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.378</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>2.046586e+10</td>
      <td>3.125000</td>
      <td>34.361884</td>
      <td>30.552489</td>
      <td>-0.021132</td>
      <td>0.274658</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
    <tr>
      <th>4</th>
      <td>USA0071</td>
      <td>-0.394</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.665</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.332</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>1.988087e+10</td>
      <td>2.633889</td>
      <td>22.893482</td>
      <td>15.466688</td>
      <td>-0.001328</td>
      <td>0.246267</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030102</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 94 columns</p>
</div>



## Merge data and daily returns into single dataframe

Use a loop to merge the `data` and `daily_return` tables on the `barrid` column.


```python
frames ={}
# TODO
dlyreturn_n_days_delay = 2

# TODO
date_shifts = zip(
        sorted(data.keys()),
        sorted(daily_return.keys())[dlyreturn_n_days_delay:len(data)+dlyreturn_n_days_delay])

# TODO
for data_date, price_date in date_shifts:
    frames[price_date] = data[data_date].merge(daily_return[price_date], on="Barrid")
```

## Let's work with a single day's data. Later, we'll put this into a loop


Notice how the keys are now dates of the returns.  So the earliest date in "frames" dictionary is two business days after the earliest date in "data" dictionary.


```python
frames.keys()
```




    dict_keys(['20030106', '20030107', '20030108', '20030109', '20030110', '20030113', '20030114', '20030115', '20030116', '20030117', '20030121', '20030122', '20030123', '20030124', '20030127', '20030128', '20030129', '20030130', '20030131', '20030203', '20030204', '20030205', '20030206', '20030207', '20030210', '20030211', '20030212', '20030213', '20030214', '20030218', '20030219', '20030220', '20030221', '20030224', '20030225', '20030226', '20030227', '20030228', '20030303', '20030304', '20030305', '20030306', '20030307', '20030310', '20030311', '20030312', '20030313', '20030314', '20030317', '20030318', '20030319', '20030320', '20030321', '20030324', '20030325', '20030326', '20030327', '20030328', '20030331', '20030401', '20030402', '20030403', '20030404', '20030407', '20030408', '20030409', '20030410', '20030411', '20030414', '20030415', '20030416', '20030417', '20030421', '20030422', '20030423', '20030424', '20030425', '20030428', '20030429', '20030430', '20030501', '20030502', '20030505', '20030506', '20030507', '20030508', '20030509', '20030512', '20030513', '20030514', '20030515', '20030516', '20030519', '20030520', '20030521', '20030522', '20030523', '20030527', '20030528', '20030529', '20030530', '20030602', '20030603', '20030604', '20030605', '20030606', '20030609', '20030610', '20030611', '20030612', '20030613', '20030616', '20030617', '20030618', '20030619', '20030620', '20030623', '20030624', '20030625', '20030626', '20030627', '20030630', '20030701', '20030702', '20030703', '20030707', '20030708', '20030709', '20030710', '20030711', '20030714', '20030715', '20030716', '20030717', '20030718', '20030721', '20030722', '20030723', '20030724', '20030725', '20030728', '20030729', '20030730', '20030731', '20030801', '20030804', '20030805', '20030806', '20030807', '20030808', '20030811', '20030812', '20030813', '20030814', '20030815', '20030818', '20030819', '20030820', '20030821', '20030822', '20030825', '20030826', '20030827', '20030828', '20030829', '20030902', '20030903', '20030904', '20030905', '20030908', '20030909', '20030910', '20030911', '20030912', '20030915', '20030916', '20030917', '20030918', '20030919', '20030922', '20030923', '20030924', '20030925', '20030926', '20030929', '20030930', '20031001', '20031002', '20031003', '20031006', '20031007', '20031008', '20031009', '20031010', '20031013', '20031014', '20031015', '20031016', '20031017', '20031020', '20031021', '20031022', '20031023', '20031024', '20031027', '20031028', '20031029', '20031030', '20031031', '20031103', '20031104', '20031105', '20031106', '20031107', '20031110', '20031111', '20031112', '20031113', '20031114', '20031117', '20031118', '20031119', '20031120', '20031121', '20031124', '20031125', '20031126', '20031128', '20031201', '20031202', '20031203', '20031204', '20031205', '20031208', '20031209', '20031210', '20031211', '20031212', '20031215', '20031216', '20031217', '20031218', '20031219', '20031222', '20031223', '20031224', '20031226', '20031229', '20031230', '20031231', '20040102', '20040105'])




```python
df = frames['20030106']
df.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>USFASTD_1DREVRSL</th>
      <th>USFASTD_AERODEF</th>
      <th>USFASTD_AIRLINES</th>
      <th>USFASTD_ALUMSTEL</th>
      <th>USFASTD_APPAREL</th>
      <th>USFASTD_AUTO</th>
      <th>USFASTD_BANKS</th>
      <th>USFASTD_BETA</th>
      <th>USFASTD_BEVTOB</th>
      <th>...</th>
      <th>ADTCA_30</th>
      <th>IssuerMarketCap</th>
      <th>Yield</th>
      <th>TotalRisk</th>
      <th>SpecRisk</th>
      <th>HistBeta</th>
      <th>PredBeta</th>
      <th>DataDate</th>
      <th>DlyReturn</th>
      <th>DlyReturnDate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>USA0001</td>
      <td>-0.837</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>3.441677e+10</td>
      <td>0.292740</td>
      <td>22.940188</td>
      <td>16.825603</td>
      <td>-0.000285</td>
      <td>0.194528</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>1</th>
      <td>USA0011</td>
      <td>-0.530</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>1.758417e+09</td>
      <td>0.000000</td>
      <td>35.056218</td>
      <td>26.040331</td>
      <td>0.000025</td>
      <td>0.150303</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>2</th>
      <td>USA0031</td>
      <td>0.109</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.018</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>6.256875e+10</td>
      <td>2.350000</td>
      <td>25.585521</td>
      <td>18.842191</td>
      <td>0.133644</td>
      <td>0.364634</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>3</th>
      <td>USA0062</td>
      <td>-0.259</td>
      <td>0.434</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.378</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>2.046586e+10</td>
      <td>3.125000</td>
      <td>34.361884</td>
      <td>30.552489</td>
      <td>-0.021132</td>
      <td>0.274658</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>4</th>
      <td>USA0071</td>
      <td>-0.394</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.665</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.332</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>1.988087e+10</td>
      <td>2.633889</td>
      <td>22.893482</td>
      <td>15.466688</td>
      <td>-0.001328</td>
      <td>0.246267</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 94 columns</p>
</div>



## Quiz

Filter the stocks so that the estimation universe has stocks with at least 1 billion in market cap.  As an aside, it doesn't make much of a difference whether we choose a ">" or ">=", since the threshold we choose is just meant to get a set of relatively liquid assets.

**Hint**: use `.copy(deep=True)` to make an independent copy of the data.


```python
# TODO
estu = df.loc[df.IssuerMarketCap>1e9].copy(deep=True)
```


```python
estu.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Barrid</th>
      <th>USFASTD_1DREVRSL</th>
      <th>USFASTD_AERODEF</th>
      <th>USFASTD_AIRLINES</th>
      <th>USFASTD_ALUMSTEL</th>
      <th>USFASTD_APPAREL</th>
      <th>USFASTD_AUTO</th>
      <th>USFASTD_BANKS</th>
      <th>USFASTD_BETA</th>
      <th>USFASTD_BEVTOB</th>
      <th>...</th>
      <th>ADTCA_30</th>
      <th>IssuerMarketCap</th>
      <th>Yield</th>
      <th>TotalRisk</th>
      <th>SpecRisk</th>
      <th>HistBeta</th>
      <th>PredBeta</th>
      <th>DataDate</th>
      <th>DlyReturn</th>
      <th>DlyReturnDate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>USA0001</td>
      <td>-0.837</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>3.441677e+10</td>
      <td>0.292740</td>
      <td>22.940188</td>
      <td>16.825603</td>
      <td>-0.000285</td>
      <td>0.194528</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>1</th>
      <td>USA0011</td>
      <td>-0.530</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.329</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>1.758417e+09</td>
      <td>0.000000</td>
      <td>35.056218</td>
      <td>26.040331</td>
      <td>0.000025</td>
      <td>0.150303</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>2</th>
      <td>USA0031</td>
      <td>0.109</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.018</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>6.256875e+10</td>
      <td>2.350000</td>
      <td>25.585521</td>
      <td>18.842191</td>
      <td>0.133644</td>
      <td>0.364634</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>3</th>
      <td>USA0062</td>
      <td>-0.259</td>
      <td>0.434</td>
      <td>0.0</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.378</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>2.046586e+10</td>
      <td>3.125000</td>
      <td>34.361884</td>
      <td>30.552489</td>
      <td>-0.021132</td>
      <td>0.274658</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
    <tr>
      <th>4</th>
      <td>USA0071</td>
      <td>-0.394</td>
      <td>0.000</td>
      <td>0.0</td>
      <td>0.665</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>-2.332</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>1.988087e+10</td>
      <td>2.633889</td>
      <td>22.893482</td>
      <td>15.466688</td>
      <td>-0.001328</td>
      <td>0.246267</td>
      <td>20030102</td>
      <td>0.0</td>
      <td>20030106</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 94 columns</p>
</div>



For all the columns in the dataframe, the ones with the prefix "USFAST" are factors.  We'll use a helper function to get the list of factors.


```python
def factors_from_names(n):
    return(list(filter(lambda x: "USFASTD_" in x, n)))
```


```python
all_factors = factors_from_names(list(df))
```


```python
all_factors
```




    ['USFASTD_1DREVRSL',
     'USFASTD_AERODEF',
     'USFASTD_AIRLINES',
     'USFASTD_ALUMSTEL',
     'USFASTD_APPAREL',
     'USFASTD_AUTO',
     'USFASTD_BANKS',
     'USFASTD_BETA',
     'USFASTD_BEVTOB',
     'USFASTD_BIOLIFE',
     'USFASTD_BLDGPROD',
     'USFASTD_CHEM',
     'USFASTD_CNSTENG',
     'USFASTD_CNSTMACH',
     'USFASTD_CNSTMATL',
     'USFASTD_COMMEQP',
     'USFASTD_COMPELEC',
     'USFASTD_COMSVCS',
     'USFASTD_CONGLOM',
     'USFASTD_CONTAINR',
     'USFASTD_DISTRIB',
     'USFASTD_DIVFIN',
     'USFASTD_DIVYILD',
     'USFASTD_DWNRISK',
     'USFASTD_EARNQLTY',
     'USFASTD_EARNYILD',
     'USFASTD_ELECEQP',
     'USFASTD_ELECUTIL',
     'USFASTD_FOODPROD',
     'USFASTD_FOODRET',
     'USFASTD_GASUTIL',
     'USFASTD_GROWTH',
     'USFASTD_HLTHEQP',
     'USFASTD_HLTHSVCS',
     'USFASTD_HOMEBLDG',
     'USFASTD_HOUSEDUR',
     'USFASTD_INDMACH',
     'USFASTD_INDMOM',
     'USFASTD_INSURNCE',
     'USFASTD_INTERNET',
     'USFASTD_LEISPROD',
     'USFASTD_LEISSVCS',
     'USFASTD_LEVERAGE',
     'USFASTD_LIFEINS',
     'USFASTD_LIQUIDTY',
     'USFASTD_LTREVRSL',
     'USFASTD_MEDIA',
     'USFASTD_MGDHLTH',
     'USFASTD_MGMTQLTY',
     'USFASTD_MIDCAP',
     'USFASTD_MOMENTUM',
     'USFASTD_MULTUTIL',
     'USFASTD_OILGSCON',
     'USFASTD_OILGSDRL',
     'USFASTD_OILGSEQP',
     'USFASTD_OILGSEXP',
     'USFASTD_PAPER',
     'USFASTD_PHARMA',
     'USFASTD_PRECMTLS',
     'USFASTD_PROFIT',
     'USFASTD_PROSPECT',
     'USFASTD_PSNLPROD',
     'USFASTD_REALEST',
     'USFASTD_RESTAUR',
     'USFASTD_RESVOL',
     'USFASTD_ROADRAIL',
     'USFASTD_SEASON',
     'USFASTD_SEMICOND',
     'USFASTD_SEMIEQP',
     'USFASTD_SENTMT',
     'USFASTD_SIZE',
     'USFASTD_SOFTWARE',
     'USFASTD_SPLTYRET',
     'USFASTD_SPTYCHEM',
     'USFASTD_SPTYSTOR',
     'USFASTD_STREVRSL',
     'USFASTD_TELECOM',
     'USFASTD_TRADECO',
     'USFASTD_TRANSPRT',
     'USFASTD_VALUE',
     'USFASTD_WIRELESS']



## factors exposures and factor returns

Recall that a factor's factor return times its factor exposure gives the part of a stock's return that is explained by that factor.

The Barra data contains the factor exposure of each factor.  We'll use regression to estimate the factor returns of each factor, on each day.  The observations will be the cross section of stock factor exposures, as well as the stock returns that are realized two trading days later.  Recall from an earlier lesson that this is a cross-sectional regression, because it's a cross section of stocks, for a single time period.

$r_{i,t} = \sum_{j=1}^{k} (\beta_{i,j,t-2} \times f_{j,t})$  
where $i=1...N$ (N assets),   
and $j=1...k$ (k factors).

In the regression, the factor exposure, $\beta_{i,j,t-2}$ is the independent variable, $r_{i,t}$ is the dependent variable, and the factor return $f_{j,t}$ is the coefficient that we'll estimate.

## Calculating factor returns

We'll estimate the factor returns $f_{j,t}$ of our chosen alpha factors, using the daily returns of the stocks $r_{i,t}$, where $i=1...N$ and the factor exposure $\beta_{i,j,t-2}$ of each stock to each factor.  

Note that we'll use a universe of stocks where the companies have a market capitalization of at least 1 billion.  The factor returns estimated would be slightly different depending on which stock universe is chosen, but choosing a market cap of 1 billion or more provides a reasonable estimate of what you'd expect to be tradable.  The estimated factor returns would be fairly close to what you'd find if you used the Russell 3000 index as the stock universe.

## formula

We'll use a helper function that creates a string that defines which are the independent and dependent variables for a model to use.  This string is called a "formula."  We'll use this in the regression, and later again when we work with matrices.


```python
def get_formula(factors, Y):
    L = ["0"]
    L.extend(factors)
    return Y + " ~ " + " + ".join(L)
```


```python
form = get_formula(all_factors, "DlyReturn")    
```

So, the formula is saying `DlyReturn` is the dependent variable, whereas the `USFAST...` columns are the independent variables.


```python
form
```




    'DlyReturn ~ 0 + USFASTD_1DREVRSL + USFASTD_AERODEF + USFASTD_AIRLINES + USFASTD_ALUMSTEL + USFASTD_APPAREL + USFASTD_AUTO + USFASTD_BANKS + USFASTD_BETA + USFASTD_BEVTOB + USFASTD_BIOLIFE + USFASTD_BLDGPROD + USFASTD_CHEM + USFASTD_CNSTENG + USFASTD_CNSTMACH + USFASTD_CNSTMATL + USFASTD_COMMEQP + USFASTD_COMPELEC + USFASTD_COMSVCS + USFASTD_CONGLOM + USFASTD_CONTAINR + USFASTD_DISTRIB + USFASTD_DIVFIN + USFASTD_DIVYILD + USFASTD_DWNRISK + USFASTD_EARNQLTY + USFASTD_EARNYILD + USFASTD_ELECEQP + USFASTD_ELECUTIL + USFASTD_FOODPROD + USFASTD_FOODRET + USFASTD_GASUTIL + USFASTD_GROWTH + USFASTD_HLTHEQP + USFASTD_HLTHSVCS + USFASTD_HOMEBLDG + USFASTD_HOUSEDUR + USFASTD_INDMACH + USFASTD_INDMOM + USFASTD_INSURNCE + USFASTD_INTERNET + USFASTD_LEISPROD + USFASTD_LEISSVCS + USFASTD_LEVERAGE + USFASTD_LIFEINS + USFASTD_LIQUIDTY + USFASTD_LTREVRSL + USFASTD_MEDIA + USFASTD_MGDHLTH + USFASTD_MGMTQLTY + USFASTD_MIDCAP + USFASTD_MOMENTUM + USFASTD_MULTUTIL + USFASTD_OILGSCON + USFASTD_OILGSDRL + USFASTD_OILGSEQP + USFASTD_OILGSEXP + USFASTD_PAPER + USFASTD_PHARMA + USFASTD_PRECMTLS + USFASTD_PROFIT + USFASTD_PROSPECT + USFASTD_PSNLPROD + USFASTD_REALEST + USFASTD_RESTAUR + USFASTD_RESVOL + USFASTD_ROADRAIL + USFASTD_SEASON + USFASTD_SEMICOND + USFASTD_SEMIEQP + USFASTD_SENTMT + USFASTD_SIZE + USFASTD_SOFTWARE + USFASTD_SPLTYRET + USFASTD_SPTYCHEM + USFASTD_SPTYSTOR + USFASTD_STREVRSL + USFASTD_TELECOM + USFASTD_TRADECO + USFASTD_TRANSPRT + USFASTD_VALUE + USFASTD_WIRELESS'



## Quiz

Run an ordinary least squares regression

[ols documentation](https://www.statsmodels.org/dev/example_formulas.html)

Here's an example of the syntax.
```
ols(formula='y ~ x1 + x2 + x3', data=dataframe)
```

Note that you're free to choose other regression models, such as ridge, lasso, or elastic net.  These may give you slightly different estimations of factor returns, but shouldn't be too different from each other.


```python
# TODO: create the ols model
model = ols(formula=form, data = estu)

# TODO: fit the model
results =model.fit()

```

Since the factor data that we're using as the independent variables are the factor exposures, the coefficients estimated by the regression are the estimated factor returns.


```python
results.params
```




    USFASTD_1DREVRSL   -0.001948
    USFASTD_AERODEF     0.018175
    USFASTD_AIRLINES    0.013188
    USFASTD_ALUMSTEL    0.027166
    USFASTD_APPAREL     0.005058
    USFASTD_AUTO        0.015605
    USFASTD_BANKS       0.018626
    USFASTD_BETA        0.006976
    USFASTD_BEVTOB      0.013862
    USFASTD_BIOLIFE     0.008931
    USFASTD_BLDGPROD    0.015665
    USFASTD_CHEM        0.019634
    USFASTD_CNSTENG     0.028528
    USFASTD_CNSTMACH    0.020496
    USFASTD_CNSTMATL    0.004233
    USFASTD_COMMEQP     0.047522
    USFASTD_COMPELEC    0.031977
    USFASTD_COMSVCS     0.019136
    USFASTD_CONGLOM     0.027570
    USFASTD_CONTAINR    0.001862
    USFASTD_DISTRIB     0.011815
    USFASTD_DIVFIN      0.023511
    USFASTD_DIVYILD     0.002793
    USFASTD_DWNRISK    -0.001370
    USFASTD_EARNQLTY    0.000626
    USFASTD_EARNYILD    0.000545
    USFASTD_ELECEQP     0.008392
    USFASTD_ELECUTIL    0.039548
    USFASTD_FOODPROD    0.012766
    USFASTD_FOODRET     0.014855
                          ...   
    USFASTD_MULTUTIL    0.007267
    USFASTD_OILGSCON    0.027288
    USFASTD_OILGSDRL   -0.016669
    USFASTD_OILGSEQP   -0.006362
    USFASTD_OILGSEXP    0.013279
    USFASTD_PAPER       0.018592
    USFASTD_PHARMA      0.021252
    USFASTD_PRECMTLS    0.021245
    USFASTD_PROFIT     -0.001238
    USFASTD_PROSPECT   -0.000946
    USFASTD_PSNLPROD    0.027450
    USFASTD_REALEST     0.014416
    USFASTD_RESTAUR     0.024002
    USFASTD_RESVOL     -0.001236
    USFASTD_ROADRAIL    0.016449
    USFASTD_SEASON     -0.000681
    USFASTD_SEMICOND    0.029540
    USFASTD_SEMIEQP     0.039211
    USFASTD_SENTMT     -0.000025
    USFASTD_SIZE        0.000202
    USFASTD_SOFTWARE    0.030222
    USFASTD_SPLTYRET    0.022529
    USFASTD_SPTYCHEM    0.022147
    USFASTD_SPTYSTOR    0.004087
    USFASTD_STREVRSL   -0.000578
    USFASTD_TELECOM     0.037187
    USFASTD_TRADECO     0.013308
    USFASTD_TRANSPRT    0.020613
    USFASTD_VALUE       0.000354
    USFASTD_WIRELESS    0.039940
    Length: 81, dtype: float64




```python
results.summary()
```




<table class="simpletable">
<caption>OLS Regression Results</caption>
<tr>
  <th>Dep. Variable:</th>        <td>DlyReturn</td>    <th>  R-squared:         </th> <td>   0.448</td> 
</tr>
<tr>
  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.422</td> 
</tr>
<tr>
  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   16.80</td> 
</tr>
<tr>
  <th>Date:</th>             <td>Thu, 25 Apr 2019</td> <th>  Prob (F-statistic):</th> <td>4.87e-162</td>
</tr>
<tr>
  <th>Time:</th>                 <td>18:17:37</td>     <th>  Log-Likelihood:    </th> <td>  4060.8</td> 
</tr>
<tr>
  <th>No. Observations:</th>      <td>  1756</td>      <th>  AIC:               </th> <td>  -7960.</td> 
</tr>
<tr>
  <th>Df Residuals:</th>          <td>  1675</td>      <th>  BIC:               </th> <td>  -7516.</td> 
</tr>
<tr>
  <th>Df Model:</th>              <td>    81</td>      <th>                     </th>     <td> </td>    
</tr>
<tr>
  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    
</tr>
</table>
<table class="simpletable">
<tr>
          <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  
</tr>
<tr>
  <th>USFASTD_1DREVRSL</th> <td>   -0.0019</td> <td>    0.001</td> <td>   -2.553</td> <td> 0.011</td> <td>   -0.003</td> <td>   -0.000</td>
</tr>
<tr>
  <th>USFASTD_AERODEF</th>  <td>    0.0182</td> <td>    0.007</td> <td>    2.663</td> <td> 0.008</td> <td>    0.005</td> <td>    0.032</td>
</tr>
<tr>
  <th>USFASTD_AIRLINES</th> <td>    0.0132</td> <td>    0.008</td> <td>    1.588</td> <td> 0.112</td> <td>   -0.003</td> <td>    0.029</td>
</tr>
<tr>
  <th>USFASTD_ALUMSTEL</th> <td>    0.0272</td> <td>    0.007</td> <td>    3.690</td> <td> 0.000</td> <td>    0.013</td> <td>    0.042</td>
</tr>
<tr>
  <th>USFASTD_APPAREL</th>  <td>    0.0051</td> <td>    0.008</td> <td>    0.622</td> <td> 0.534</td> <td>   -0.011</td> <td>    0.021</td>
</tr>
<tr>
  <th>USFASTD_AUTO</th>     <td>    0.0156</td> <td>    0.006</td> <td>    2.632</td> <td> 0.009</td> <td>    0.004</td> <td>    0.027</td>
</tr>
<tr>
  <th>USFASTD_BANKS</th>    <td>    0.0186</td> <td>    0.003</td> <td>    6.848</td> <td> 0.000</td> <td>    0.013</td> <td>    0.024</td>
</tr>
<tr>
  <th>USFASTD_BETA</th>     <td>    0.0070</td> <td>    0.001</td> <td>    8.915</td> <td> 0.000</td> <td>    0.005</td> <td>    0.009</td>
</tr>
<tr>
  <th>USFASTD_BEVTOB</th>   <td>    0.0139</td> <td>    0.004</td> <td>    3.129</td> <td> 0.002</td> <td>    0.005</td> <td>    0.023</td>
</tr>
<tr>
  <th>USFASTD_BIOLIFE</th>  <td>    0.0089</td> <td>    0.005</td> <td>    1.821</td> <td> 0.069</td> <td>   -0.001</td> <td>    0.019</td>
</tr>
<tr>
  <th>USFASTD_BLDGPROD</th> <td>    0.0157</td> <td>    0.018</td> <td>    0.875</td> <td> 0.381</td> <td>   -0.019</td> <td>    0.051</td>
</tr>
<tr>
  <th>USFASTD_CHEM</th>     <td>    0.0196</td> <td>    0.006</td> <td>    3.324</td> <td> 0.001</td> <td>    0.008</td> <td>    0.031</td>
</tr>
<tr>
  <th>USFASTD_CNSTENG</th>  <td>    0.0285</td> <td>    0.018</td> <td>    1.594</td> <td> 0.111</td> <td>   -0.007</td> <td>    0.064</td>
</tr>
<tr>
  <th>USFASTD_CNSTMACH</th> <td>    0.0205</td> <td>    0.009</td> <td>    2.405</td> <td> 0.016</td> <td>    0.004</td> <td>    0.037</td>
</tr>
<tr>
  <th>USFASTD_CNSTMATL</th> <td>    0.0042</td> <td>    0.008</td> <td>    0.522</td> <td> 0.602</td> <td>   -0.012</td> <td>    0.020</td>
</tr>
<tr>
  <th>USFASTD_COMMEQP</th>  <td>    0.0475</td> <td>    0.005</td> <td>    9.337</td> <td> 0.000</td> <td>    0.038</td> <td>    0.058</td>
</tr>
<tr>
  <th>USFASTD_COMPELEC</th> <td>    0.0320</td> <td>    0.004</td> <td>    8.496</td> <td> 0.000</td> <td>    0.025</td> <td>    0.039</td>
</tr>
<tr>
  <th>USFASTD_COMSVCS</th>  <td>    0.0191</td> <td>    0.003</td> <td>    5.535</td> <td> 0.000</td> <td>    0.012</td> <td>    0.026</td>
</tr>
<tr>
  <th>USFASTD_CONGLOM</th>  <td>    0.0276</td> <td>    0.010</td> <td>    2.840</td> <td> 0.005</td> <td>    0.009</td> <td>    0.047</td>
</tr>
<tr>
  <th>USFASTD_CONTAINR</th> <td>    0.0019</td> <td>    0.008</td> <td>    0.220</td> <td> 0.826</td> <td>   -0.015</td> <td>    0.019</td>
</tr>
<tr>
  <th>USFASTD_DISTRIB</th>  <td>    0.0118</td> <td>    0.006</td> <td>    2.012</td> <td> 0.044</td> <td>    0.000</td> <td>    0.023</td>
</tr>
<tr>
  <th>USFASTD_DIVFIN</th>   <td>    0.0235</td> <td>    0.003</td> <td>    6.984</td> <td> 0.000</td> <td>    0.017</td> <td>    0.030</td>
</tr>
<tr>
  <th>USFASTD_DIVYILD</th>  <td>    0.0028</td> <td>    0.001</td> <td>    3.622</td> <td> 0.000</td> <td>    0.001</td> <td>    0.004</td>
</tr>
<tr>
  <th>USFASTD_DWNRISK</th>  <td>   -0.0014</td> <td>    0.001</td> <td>   -2.182</td> <td> 0.029</td> <td>   -0.003</td> <td>   -0.000</td>
</tr>
<tr>
  <th>USFASTD_EARNQLTY</th> <td>    0.0006</td> <td>    0.001</td> <td>    0.772</td> <td> 0.440</td> <td>   -0.001</td> <td>    0.002</td>
</tr>
<tr>
  <th>USFASTD_EARNYILD</th> <td>    0.0005</td> <td>    0.001</td> <td>    0.598</td> <td> 0.550</td> <td>   -0.001</td> <td>    0.002</td>
</tr>
<tr>
  <th>USFASTD_ELECEQP</th>  <td>    0.0084</td> <td>    0.007</td> <td>    1.214</td> <td> 0.225</td> <td>   -0.005</td> <td>    0.022</td>
</tr>
<tr>
  <th>USFASTD_ELECUTIL</th> <td>    0.0395</td> <td>    0.005</td> <td>    8.558</td> <td> 0.000</td> <td>    0.030</td> <td>    0.049</td>
</tr>
<tr>
  <th>USFASTD_FOODPROD</th> <td>    0.0128</td> <td>    0.005</td> <td>    2.677</td> <td> 0.008</td> <td>    0.003</td> <td>    0.022</td>
</tr>
<tr>
  <th>USFASTD_FOODRET</th>  <td>    0.0149</td> <td>    0.006</td> <td>    2.542</td> <td> 0.011</td> <td>    0.003</td> <td>    0.026</td>
</tr>
<tr>
  <th>USFASTD_GASUTIL</th>  <td>    0.0257</td> <td>    0.007</td> <td>    3.600</td> <td> 0.000</td> <td>    0.012</td> <td>    0.040</td>
</tr>
<tr>
  <th>USFASTD_GROWTH</th>   <td>    0.0003</td> <td>    0.001</td> <td>    0.409</td> <td> 0.682</td> <td>   -0.001</td> <td>    0.002</td>
</tr>
<tr>
  <th>USFASTD_HLTHEQP</th>  <td>    0.0161</td> <td>    0.004</td> <td>    3.578</td> <td> 0.000</td> <td>    0.007</td> <td>    0.025</td>
</tr>
<tr>
  <th>USFASTD_HLTHSVCS</th> <td>    0.0260</td> <td>    0.005</td> <td>    5.496</td> <td> 0.000</td> <td>    0.017</td> <td>    0.035</td>
</tr>
<tr>
  <th>USFASTD_HOMEBLDG</th> <td>   -0.0081</td> <td>    0.008</td> <td>   -0.965</td> <td> 0.335</td> <td>   -0.025</td> <td>    0.008</td>
</tr>
<tr>
  <th>USFASTD_HOUSEDUR</th> <td>    0.0309</td> <td>    0.006</td> <td>    5.156</td> <td> 0.000</td> <td>    0.019</td> <td>    0.043</td>
</tr>
<tr>
  <th>USFASTD_INDMACH</th>  <td>    0.0108</td> <td>    0.006</td> <td>    1.814</td> <td> 0.070</td> <td>   -0.001</td> <td>    0.023</td>
</tr>
<tr>
  <th>USFASTD_INDMOM</th>   <td>   -0.0006</td> <td>    0.001</td> <td>   -1.026</td> <td> 0.305</td> <td>   -0.002</td> <td>    0.001</td>
</tr>
<tr>
  <th>USFASTD_INSURNCE</th> <td>    0.0222</td> <td>    0.004</td> <td>    5.236</td> <td> 0.000</td> <td>    0.014</td> <td>    0.031</td>
</tr>
<tr>
  <th>USFASTD_INTERNET</th> <td>    0.0141</td> <td>    0.006</td> <td>    2.530</td> <td> 0.012</td> <td>    0.003</td> <td>    0.025</td>
</tr>
<tr>
  <th>USFASTD_LEISPROD</th> <td>    0.0164</td> <td>    0.006</td> <td>    2.979</td> <td> 0.003</td> <td>    0.006</td> <td>    0.027</td>
</tr>
<tr>
  <th>USFASTD_LEISSVCS</th> <td>   -0.0028</td> <td>    0.005</td> <td>   -0.529</td> <td> 0.597</td> <td>   -0.013</td> <td>    0.008</td>
</tr>
<tr>
  <th>USFASTD_LEVERAGE</th> <td>    0.0011</td> <td>    0.001</td> <td>    1.326</td> <td> 0.185</td> <td>   -0.001</td> <td>    0.003</td>
</tr>
<tr>
  <th>USFASTD_LIFEINS</th>  <td>    0.0106</td> <td>    0.006</td> <td>    1.768</td> <td> 0.077</td> <td>   -0.001</td> <td>    0.022</td>
</tr>
<tr>
  <th>USFASTD_LIQUIDTY</th> <td>    0.0008</td> <td>    0.001</td> <td>    1.520</td> <td> 0.129</td> <td>   -0.000</td> <td>    0.002</td>
</tr>
<tr>
  <th>USFASTD_LTREVRSL</th> <td>   -0.0003</td> <td>    0.001</td> <td>   -0.415</td> <td> 0.678</td> <td>   -0.002</td> <td>    0.001</td>
</tr>
<tr>
  <th>USFASTD_MEDIA</th>    <td>    0.0229</td> <td>    0.003</td> <td>    7.745</td> <td> 0.000</td> <td>    0.017</td> <td>    0.029</td>
</tr>
<tr>
  <th>USFASTD_MGDHLTH</th>  <td>    0.0113</td> <td>    0.007</td> <td>    1.517</td> <td> 0.130</td> <td>   -0.003</td> <td>    0.026</td>
</tr>
<tr>
  <th>USFASTD_MGMTQLTY</th> <td>    0.0010</td> <td>    0.001</td> <td>    1.281</td> <td> 0.200</td> <td>   -0.001</td> <td>    0.002</td>
</tr>
<tr>
  <th>USFASTD_MIDCAP</th>   <td>   -0.0006</td> <td>    0.003</td> <td>   -0.209</td> <td> 0.835</td> <td>   -0.006</td> <td>    0.005</td>
</tr>
<tr>
  <th>USFASTD_MOMENTUM</th> <td>   -0.0023</td> <td>    0.001</td> <td>   -2.681</td> <td> 0.007</td> <td>   -0.004</td> <td>   -0.001</td>
</tr>
<tr>
  <th>USFASTD_MULTUTIL</th> <td>    0.0073</td> <td>    0.008</td> <td>    0.921</td> <td> 0.357</td> <td>   -0.008</td> <td>    0.023</td>
</tr>
<tr>
  <th>USFASTD_OILGSCON</th> <td>    0.0273</td> <td>    0.005</td> <td>    5.183</td> <td> 0.000</td> <td>    0.017</td> <td>    0.038</td>
</tr>
<tr>
  <th>USFASTD_OILGSDRL</th> <td>   -0.0167</td> <td>    0.007</td> <td>   -2.335</td> <td> 0.020</td> <td>   -0.031</td> <td>   -0.003</td>
</tr>
<tr>
  <th>USFASTD_OILGSEQP</th> <td>   -0.0064</td> <td>    0.007</td> <td>   -0.897</td> <td> 0.370</td> <td>   -0.020</td> <td>    0.008</td>
</tr>
<tr>
  <th>USFASTD_OILGSEXP</th> <td>    0.0133</td> <td>    0.005</td> <td>    2.867</td> <td> 0.004</td> <td>    0.004</td> <td>    0.022</td>
</tr>
<tr>
  <th>USFASTD_PAPER</th>    <td>    0.0186</td> <td>    0.007</td> <td>    2.686</td> <td> 0.007</td> <td>    0.005</td> <td>    0.032</td>
</tr>
<tr>
  <th>USFASTD_PHARMA</th>   <td>    0.0213</td> <td>    0.004</td> <td>    5.337</td> <td> 0.000</td> <td>    0.013</td> <td>    0.029</td>
</tr>
<tr>
  <th>USFASTD_PRECMTLS</th> <td>    0.0212</td> <td>    0.005</td> <td>    4.269</td> <td> 0.000</td> <td>    0.011</td> <td>    0.031</td>
</tr>
<tr>
  <th>USFASTD_PROFIT</th>   <td>   -0.0012</td> <td>    0.001</td> <td>   -1.126</td> <td> 0.260</td> <td>   -0.003</td> <td>    0.001</td>
</tr>
<tr>
  <th>USFASTD_PROSPECT</th> <td>   -0.0009</td> <td>    0.001</td> <td>   -1.520</td> <td> 0.129</td> <td>   -0.002</td> <td>    0.000</td>
</tr>
<tr>
  <th>USFASTD_PSNLPROD</th> <td>    0.0275</td> <td>    0.006</td> <td>    4.635</td> <td> 0.000</td> <td>    0.016</td> <td>    0.039</td>
</tr>
<tr>
  <th>USFASTD_REALEST</th>  <td>    0.0144</td> <td>    0.004</td> <td>    3.824</td> <td> 0.000</td> <td>    0.007</td> <td>    0.022</td>
</tr>
<tr>
  <th>USFASTD_RESTAUR</th>  <td>    0.0240</td> <td>    0.007</td> <td>    3.688</td> <td> 0.000</td> <td>    0.011</td> <td>    0.037</td>
</tr>
<tr>
  <th>USFASTD_RESVOL</th>   <td>   -0.0012</td> <td>    0.001</td> <td>   -1.642</td> <td> 0.101</td> <td>   -0.003</td> <td>    0.000</td>
</tr>
<tr>
  <th>USFASTD_ROADRAIL</th> <td>    0.0164</td> <td>    0.007</td> <td>    2.220</td> <td> 0.027</td> <td>    0.002</td> <td>    0.031</td>
</tr>
<tr>
  <th>USFASTD_SEASON</th>   <td>   -0.0007</td> <td>    0.001</td> <td>   -1.003</td> <td> 0.316</td> <td>   -0.002</td> <td>    0.001</td>
</tr>
<tr>
  <th>USFASTD_SEMICOND</th> <td>    0.0295</td> <td>    0.004</td> <td>    6.636</td> <td> 0.000</td> <td>    0.021</td> <td>    0.038</td>
</tr>
<tr>
  <th>USFASTD_SEMIEQP</th>  <td>    0.0392</td> <td>    0.008</td> <td>    5.219</td> <td> 0.000</td> <td>    0.024</td> <td>    0.054</td>
</tr>
<tr>
  <th>USFASTD_SENTMT</th>   <td>-2.504e-05</td> <td>    0.001</td> <td>   -0.031</td> <td> 0.975</td> <td>   -0.002</td> <td>    0.002</td>
</tr>
<tr>
  <th>USFASTD_SIZE</th>     <td>    0.0002</td> <td>    0.002</td> <td>    0.128</td> <td> 0.898</td> <td>   -0.003</td> <td>    0.003</td>
</tr>
<tr>
  <th>USFASTD_SOFTWARE</th> <td>    0.0302</td> <td>    0.004</td> <td>    6.911</td> <td> 0.000</td> <td>    0.022</td> <td>    0.039</td>
</tr>
<tr>
  <th>USFASTD_SPLTYRET</th> <td>    0.0225</td> <td>    0.007</td> <td>    3.061</td> <td> 0.002</td> <td>    0.008</td> <td>    0.037</td>
</tr>
<tr>
  <th>USFASTD_SPTYCHEM</th> <td>    0.0221</td> <td>    0.007</td> <td>    3.018</td> <td> 0.003</td> <td>    0.008</td> <td>    0.037</td>
</tr>
<tr>
  <th>USFASTD_SPTYSTOR</th> <td>    0.0041</td> <td>    0.006</td> <td>    0.701</td> <td> 0.484</td> <td>   -0.007</td> <td>    0.016</td>
</tr>
<tr>
  <th>USFASTD_STREVRSL</th> <td>   -0.0006</td> <td>    0.001</td> <td>   -0.749</td> <td> 0.454</td> <td>   -0.002</td> <td>    0.001</td>
</tr>
<tr>
  <th>USFASTD_TELECOM</th>  <td>    0.0372</td> <td>    0.004</td> <td>    9.174</td> <td> 0.000</td> <td>    0.029</td> <td>    0.045</td>
</tr>
<tr>
  <th>USFASTD_TRADECO</th>  <td>    0.0133</td> <td>    0.009</td> <td>    1.530</td> <td> 0.126</td> <td>   -0.004</td> <td>    0.030</td>
</tr>
<tr>
  <th>USFASTD_TRANSPRT</th> <td>    0.0206</td> <td>    0.008</td> <td>    2.674</td> <td> 0.008</td> <td>    0.005</td> <td>    0.036</td>
</tr>
<tr>
  <th>USFASTD_VALUE</th>    <td>    0.0004</td> <td>    0.001</td> <td>    0.437</td> <td> 0.662</td> <td>   -0.001</td> <td>    0.002</td>
</tr>
<tr>
  <th>USFASTD_WIRELESS</th> <td>    0.0399</td> <td>    0.006</td> <td>    7.029</td> <td> 0.000</td> <td>    0.029</td> <td>    0.051</td>
</tr>
</table>
<table class="simpletable">
<tr>
  <th>Omnibus:</th>       <td>2091.189</td> <th>  Durbin-Watson:     </th>  <td>   2.119</td> 
</tr>
<tr>
  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>834567.726</td>
</tr>
<tr>
  <th>Skew:</th>           <td>-5.619</td>  <th>  Prob(JB):          </th>  <td>    0.00</td> 
</tr>
<tr>
  <th>Kurtosis:</th>       <td>109.208</td> <th>  Cond. No.          </th>  <td>    61.3</td> 
</tr>
</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.




```python
#: EXAMPLE cell

#: TO understand how the OLS regression works
#: using very simple example
#: coef = (X.T*X)^-1*X.T*y
#: y = coef * X + intercept
from patsy import dmatrices, build_design_matrices
def factors_from_names_T(n):
    return(list(filter(lambda x: "USFASTD_T" in x, n)))



factors_T = factors_from_names_T(list(df))
form_T = get_formula(factors_T, "DlyReturn")    

testdf = df.loc[df.IssuerMarketCap>2.5e11].copy(deep=True)
testdf = testdf.loc[df['DlyReturn'] > 0,['USFASTD_VALUE','USFASTD_TRANSPRT','DataDate','DlyReturn','DlyReturnDate']]

#: model with intercept
#model_T = ols(formula='DlyReturn ~ USFASTD_VALUE', data = testdf)

#: model without intercept
model_T = ols(formula='DlyReturn ~ 0 + USFASTD_VALUE', data = testdf)
y, X = dmatrices('DlyReturn ~  0+ USFASTD_VALUE', data=testdf, return_type='dataframe')

results_T =model_T.fit()

print(testdf)
print(results_T.params)
print('===============')
tmp1 = np.dot( np.linalg.inv(np.dot(X.T.values ,X.values)),np.dot(X.T.values,y.values))
tmp2 = np.dot( np.dot(np.linalg.inv(np.dot(X.T,X)),X.T),y)

print(tmp1)
print(tmp2)
print('===============')

print(tmp1 * X.values)
print(y)
```

          USFASTD_VALUE  USFASTD_TRANSPRT  DataDate  DlyReturn DlyReturnDate
    4109         -0.369               0.0  20030102   0.025591      20030106
    5000         -0.596               0.0  20030102   0.018219      20030106
    USFASTD_VALUE   -0.041316
    dtype: float64
    ===============
    [[-0.04131574]]
    [[-0.04131574]]
    ===============
    [[0.01524551]
     [0.02462418]]
          DlyReturn
    4109   0.025591
    5000   0.018219



```python

```

## Quiz: winsorize daily returns before calculating factor returns

We're going to use regression to estimate the factor returns of all the factors.  To avoid using extreme values in the regression, we'll winsorize, or "clip" the returns.  We can check the data distribution using a density plot.

Note that [numpy.where](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.where.html) has the form 
```
numpy.where(<condition>, <value if true>, <value if false>)
```


```python
def wins(x,wins_lower,wins_upper):
    #TODO
    clipped_upper = np.where(x >= wins_upper, wins_upper,x)
    clipped_both = np.where(clipped_upper <= wins_lower, wins_lower,clipped_upper)
    return clipped_both
```

A density plot will help us visually check the effect of winsorizing returns.


```python
def density_plot(data): 
    density = gaussian_kde(data)
    xs = np.linspace(np.min(data),np.max(data),200)
    density.covariance_factor = lambda : .25
    density._compute_covariance()
    plt.plot(xs,density(xs))
    plt.show()
```


```python
# distribution without winsorizing
test = frames['20040102']
density_plot(test['DlyReturn'])
test['DlyReturn'].plot()
debug = test.loc[test['DlyReturn'] > 200]
print(len(debug))
```


![png](optimization_with_tcosts_74_0.png)


    1



![png](optimization_with_tcosts_74_2.png)



```python
# distribution after winsorizing
test['DlyReturn_wins'] = wins(test['DlyReturn'],wins_lower=-0.1,wins_upper=0.1)
density_plot(test['DlyReturn_wins'])
debug = test.loc[test['DlyReturn_wins'] > 1]
print(len(debug))
test['DlyReturn_wins'].plot()
```


![png](optimization_with_tcosts_75_0.png)


    0





    <matplotlib.axes._subplots.AxesSubplot at 0x7f631d640a58>




![png](optimization_with_tcosts_75_3.png)


## Quiz

Put the factor returns estimation into a function, so that this can be re-used for each day's data.



```python
#: factor return is the estimated value using linear regession.
#: factor return multiply by the factor exposure (given) should equals to the stock daily return.

def estimate_factor_returns(df, wins_lower=-.25, wins_upper=0.25): 
    ## TODO: build estimation universe based on filters 
    estu = df.loc[df.IssuerMarketCap>1e9].copy(deep=True)
  
    ## TODO: winsorize returns for fitting 
    estu['DlyReturn'] = wins(estu['DlyReturn'],wins_lower,wins_upper)
  
    ## get a list of all the factors
    all_factors = factors_from_names(list(df))
    
    ## define a 'formula' for the regression
    form = get_formula(all_factors, "DlyReturn")
    
    ## create the OLS model, passing in the formula and the estimation universe dataframe
    model = ols(formula=form, data = estu)
    
    ## return the estimated coefficients
    results = model.fit()
    return(results.params)
```

## Choose alpha factors

We'll choose the 1 day reversal, earnings yield, value, and sentiment factors as alpha factors.  We'll calculate the factor returns of these alpha factors to see how they performed.


```python
alpha_factors = ["USFASTD_1DREVRSL", "USFASTD_EARNYILD", "USFASTD_VALUE", "USFASTD_SENTMT"]
print(alpha_factors)
```

    ['USFASTD_1DREVRSL', 'USFASTD_EARNYILD', 'USFASTD_VALUE', 'USFASTD_SENTMT']


## Quiz: estimate factor returns of alpha factors

Loop through each day, and estimate the factors returns of each factor, that date, in the `frames` dictionary.  This may take a minute or more to run per year of data used.


```python
facret = {}
for date in frames:
    # TODO: store factor returns as key-value pairs in a dictionary
    facret[date] = estimate_factor_returns(frames[date])
```


```python
type(facret['20040102'])
```




    pandas.core.series.Series




```python
facret['20040102'].head()
```




    USFASTD_1DREVRSL    0.000058
    USFASTD_AERODEF    -0.006754
    USFASTD_AIRLINES    0.011158
    USFASTD_ALUMSTEL    0.004400
    USFASTD_APPAREL    -0.018701
    dtype: float64



## put the factor returns into a dataframe

The pandas series are stored inside a dictionary.  We'll put the factor returns into a dataframe where the rows are the dates and the columns are the factor returns (one column for each factor).

First, let's get a list of dates, as Timestamp objects.  We'll use [pandas.to_datetime](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)


```python
# example of how to convert the keys of the dataframe into Timestamp objects
pd.to_datetime('20040102', format='%Y%m%d')
```




    Timestamp('2004-01-02 00:00:00')



## Quiz

Store the timestamp objects in a list (can use a list comprehension, or for loop).


```python
# TODO
dates_unsorted = # ...
```


      File "<ipython-input-58-a2c2ec027e30>", line 2
        dates_unsorted = # ...
                              ^
    SyntaxError: invalid syntax




```python
# sort the dates in ascending order
my_dates = sorted(dates_unsorted)
```


```python
# We'll make an empty dataframe with the dates set as the row index.
facret_df = pd.DataFrame(index = my_dates)
```


```python
facret_df.head()
```

The rows are the dates.  The columns will be the factor returns. 

To convert from Timestamp objects back into a string, we can use [Timestamp.strftime('%Y%m%d')](https://www.programiz.com/python-programming/datetime/strftime). 


```python
## example usage of Timestamp.strftime('%Y%m%d')
my_dates[0].strftime('%Y%m%d')
```

## Quiz
For each date, and for each factor return, get the value from the dictionary and put it into the dataframe.

We can use [pandas.DataFrame.at¶](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.at.html), 

```
DataFrame.at[<index_value>,<column_name>] = <some_value>
```


```python
# TODO: for each date (rows), and for each factor (columns),
# store factor return in the dataframe
for dt in my_dates: 
    for alp in alpha_factors:
        facret_df.at[dt, alp] = # ...
```

## Portfolio optimization for a single period

When we get to the project, we'll want to define the portfolio optimization within a function.  For now, let's walk through the steps we'll take in separate cells, so that we can see what's going on.

The optimization will want to know about the prior trading day's portfolio holdings, also called holdings.  The previous day's holdings will be used to estimate the size of the trades due to position changes, which in turn helps us estimate transaction costs.  We'll start with an initial holding of zero for a single stock.  The reason we'll use a single stock is that the estimation universe chosen on each day will include all stocks that have holdings on the previous day.  So we want to keep this list small when we first start out, else we'll keep many stocks that may fall below the 1 billion market cap threshold, just because they were chosen in the initialization of the backtest.

We'll want to choose a stock that is likely to satisfy the 1 billion market cap threshold on any day.  So let's choose the stock with the largest market cap.


```python
# we're going to set a single barra id to have a zero portfolio holding, 
# so let's pick any barra id of the stock with the largest issuer market cap
estu.sort_values('IssuerMarketCap',ascending=False)[['Barrid','IssuerMarketCap']].head()
```

## Quiz: Intialize previous holdings dataframe

Create a new dataframe and initialize it with a dictionary, where the key is "Barrid" followed by a value that is a pandas.Series containing the barra id of the largest market cap in the stock universe.  

Also set another key value pair to "x.opt.previous" and the value is set to a pandas.Series with the value 0.


```python
# TODO
# create a dataframe of previous holdings, 
# initializing a single stock (barra id) to zero portfolio holding
previous_holdings = pd.DataFrame(data = {"Barrid" : """<your code here>""", 
                                         "x.opt.previous" : """<your code here>"""})
```


```python
previous_holdings
```

Get a single day's data to be used for the portfolio optimization.


```python
dt = my_dates[0]
date = dt.strftime('%Y%m%d')
print(date)
df = frames[date]
df.head()
```

Let's add the previous holdings column to the dataframe


```python
## merge previous portfolio holdings 
df = df.merge(previous_holdings, how = 'left', on = 'Barrid')
```


```python
df.head()
```

## Clean missing and zero values.

First replace missing values with zero.


```python
def na2z(x):
    return(np.nan_to_num(x))

def names_numeric_columns(df): 
    return(df.select_dtypes(include=[np.number]).columns.tolist())

def clean_nas(df):
    for x in names_numeric_columns(df): 
        df[x] = na2z(df[x])
    return(df)
```


```python
df = clean_nas(df)
```

## Quiz: Clean specific risk
Barra calculates specific risk for each asset.  If the value in the data is zero, this may be due to missing data rather than the specific risk actually being zero.  So we'll set zero values to the median, to make sure our model is more realistic.


```python
# TODO: if SpecRisk is zero, set it to median
df.loc[df['SpecRisk'] == """<enter a number here>"""]['SpecRisk'] = median("""<your code here>""")
```

## universe

We'll look at stocks that are 1 billion in market cap or greater.  An important point here is that we'll need to account for stocks that are already in our portfolio, even if the market cap of the stock is no longer 1 billion on the current day.

#### Quiz: think about what would happen if we had an existing position in a stock, then the market cap fell below the threshold and the stock was excluded from the stock universe.  What would happen to the position on that stock?

#### Answer
The stock would not be included in the optimization, which means it would be given a zero position.  So this effectively says to sell all holdings in the asset once it falls below the market cap threshold.  That's not what we want to do.

Modify the code to account for the prior day's positions.


```python
## TODO: modify the given code to include the prior day's assets
universe = df.loc[(df['IssuerMarketCap'] >= 1e9)].copy()
```


```python
universe.head()
```

## Quiz: Nothing here should be allowed to look at returns when forming the portfolio.
Make this impossible by removing the Daily returns data from the dataframe.  Drop the DlyReturn field from the dataframe.


```python
# TODO: drop DlyReturn column
universe = # ...
```


```python
## this will extract all of the factors, including the alphas 
# list(universe) gets a list of the column names of the dataframe
all_factors = factors_from_names(list(universe))
```


```python
all_factors
```

## Alpha factors

Just a reminder that we chose four of these factors that represent previously effective alpha factors.  Since these factors became well known over time, they were added to the Barra data set.  For the time frame that we're running the back-test, these were effective alpha factors.


```python
alpha_factors #4 alpha factors
```

## Quiz: risk factors

The risk factors we'll use are all the factors that are not alpha factors.  Complete the setdiff function so that it takes a superset, a subset, and returns the difference as a set.

diff= SuperSet \ Subset


```python
def setdiff(superset, subset): 
    # TODO: create a set from subset
    s = # ...

    # TODO: get the difference
    diffset = # ...
    return(diffset)
```


```python
risk_factors = setdiff(all_factors, alpha_factors)
```


```python
# 77 risk factors
len(risk_factors)
```

Save initial holdings in a variable for easier access.  We'll later use it in matrix multiplications, so let's convert this to a numpy array.  We'll also use another variable to represent the current holdings, which are to be run through the optimizer.  We'll set this to be a copy of the previous holdings.  Later the optimizer will continually update this to optimize the objective function.


```python
## initial holdings (before optimization)
# optimal holding from prior day
h0 = np.asarray( universe['x.opt.previous'] )
```


```python
h = h0.copy()
```

## Matrix of Risk Factor Exposures $\textbf{B}$

The dataframe contains several columns that we'll use as risk factors exposures.  Extract these and put them into a matrix.

The data, such as industry category, are already one-hot encoded, but if this were not the case, then using `patsy.dmatrices` would help, as this function extracts categories and performs the one-hot encoding.  We'll practice using this package, as you may find it useful with future data sets.  You could also store the factors in a dataframe if you prefer to avoid using patsy.dmatrices.

#### How to use patsy.dmatrices

patsy.dmatrices takes in a formula and the dataframe.  The formula tells the function which columns to take.  The formula will look something like this:  
`SpecRisk ~ 0 + USFASTD_AERODEF + USFASTD_AIRLINES + ...`  
where the variable to the left of the ~ is the "dependent variable" and the others to the right are the independent variables (as if we were preparing data to be fit to a model).

This just means that the pasty.dmatrices function will return two matrix variables, one that contains the single column for the dependent variable `outcome`, and the independent variable columns are stored in a matrix `predictors`.

The `predictors` matrix will contain the matrix of risk factors, which is what we want.  We don't actually need the `outcome` matrix; it's just created because that's the way patsy.dmatrices works.


```python
# Note that we chose "SpecRisk" simply because it's not one of the USFAST factors.
# it will be discarded in the next step.
formula = get_formula(risk_factors, "SpecRisk")
formula
```


```python
# the factors will be in the second returned variable (predictors)
# the outcome variable contains the SpecRisk data, which we don't actually need here
outcome, predictors = patsy.dmatrices(formula,universe)
```

`predictors` contains the factor exposures of each asset to each factor.


```python
predictors.shape
```

## Factor exposure matrix $\textbf{B}$


Remember, the factor exposure matrix has the exposure of each asset to each factor.  Thee number of rows is number of assets, and number of columns is the number of factors.


```python
def NROW(x):
    return(np.shape(x)[0])

def NCOL(x):
    return(np.shape(x)[1])
```

## Quiz

Set the factor exposure matrix and its transpose, using one of the outputs from calling patsy.dmatrices


```python
## TODO: risk exposure matrix: 
B = # ...
BT = B.transpose()

k = NCOL(B) #number of factors (77)
n = NROW(B) #number of assets (2000+)
```

## Factor covariance matrix $\textbf{F}$

We can improve on the factor covariance matrix by reducing noise and also increasing computational efficiency.

If we have, 70 risk factors in our risk model, then the covariance matrix of factors is a 70 by 70 square matrix.  The diagonal contains the variances of each factor, while the off-diagonals contain the pairwise covariances of two different risk factors.

In general, it’s good to have a healthy suspicion of correlations and covariances, and to ask if correlation data adds information or just more noise.  One way to be conservative about the information in a covariance matrix is to shrink the covariances, or even reduce them to zero.  In other words, we could keep just the variances along the diagonal, and set the covariances in the off-diagonals to zero.

In the case where we’re using the covariance matrix in a risk factor model, there’s also some additional intuition for why we can try using just the variances, and discard the covariances.  The goal of the optimizer is to reduce the portfolio’s exposure to these risk factors.  So if the optimizer reduces the portfolio’s exposure to risk factor “one”, and also reduces its exposure to risk factor “two”, then it’s less important to know exactly how factor one varies with factor two.

You may wonder what are the benefits of throwing away the information about the covariances.  In addition to making your model more conservative, and limiting possible noise in your data, a diagonal matrix also makes matrix operations more efficient.  This theme of computational efficiency is one that you’ll come across in many use cases, including backtesting.  Backtesting is a computationally and time-intensive process, so the more efficient you can make it, the more quickly you can test your alphas, and iterate to make improvements.


## Create Factor covariance matrix $\textbf{F}$

You can try getting all covariances into the matrix.  Notice that we'll run into some issues where the covariance data doesn't exist.

One important point to remember is that we need to order the factors in the covariance matrix F so that they match up with the order of the factors in the factor exposures matrix B.

Note that covariance data is in percentage units squared, so to use decimals, so we'll rescale it to convert it to decimal.


```python
## With all covariances
def colnames(X):
    if(type(X) == patsy.design_info.DesignMatrix): 
        return(X.design_info.column_names)
    if(type(X) == pandas.core.frame.DataFrame): 
        return(X.columns.tolist())
    return(None)

## extract a diagonal element from the factor covariance matrix 
def get_cov_version1(cv, factor1, factor2): 
    try:
        return(cv.loc[(cv.Factor1==factor1) & (cv.Factor2==factor2),"VarCovar"].iloc[0])
    except:
        print(f"didn't find covariance for: factor 1: {factor1} factor2: {factor2}")
        return 0

def diagonal_factor_cov_version1(date, B):
    """
    Notice that we'll use the order of column names of the factor exposure matrix
    to set the order of factors in the factor covariance matrix
    """
    cv = covariance[date]
    k = NCOL(B)
    Fm = np.zeros([k,k])
    for i in range(0,k):
        for j in range(0,k): 
            fac1 = colnames(B)[i]
            fac2 = colnames(B)[j]
            # Convert from percentage units squared to decimal
            Fm[i,j] = (0.01**2) * get_cov_version1(cv, fac1, fac2)
    return(Fm)
```

Here's an example where the two factors don't have covariance data for the date selected


```python
cv = covariance['20031211']
cv.loc[(cv.Factor1=='USFASTD_AERODEF') & (cv.Factor2=='USFASTD_ALUMSTEL')]
```

We can see where all the factor covariances aren't found in the data.

## Which date?

Recall that there's a DataDate column and DlyReturnDate column in the dataframe.  We're going to use a date to access the covariance data.  Which date should we use?


```python
df.head()
```

## Answer here



## Quiz
Choose the correct date, then use the `diagonal_factor_cov_version1` to get the factor covariance matrix of that date.


```python
# TODO
date = str(int(universe["""<your code here>"""][1]))
print(date, end =" ")
F_version1 = diagonal_factor_cov_version1(date, B)
```

## Quiz: Create matrix of factor variances

Just use the factor variances and set the off diagonal covariances to zero.


```python
def colnames(X):
    if(type(X) == patsy.design_info.DesignMatrix): 
        return(X.design_info.column_names)
    if(type(X) == pandas.core.frame.DataFrame): 
        return(X.columns.tolist())
    return(None)

## extract a diagonal element from the factor covariance matrix 
def get_var(cv, factor): 
    # TODO
    return(cv.loc[(cv.Factor1=="""<your code here>""") & ("""<your code here>"""=="""<your code here>"""),"VarCovar"].iloc[0])


def diagonal_factor_cov(date, B):
    """
    Notice that we'll use the order of column names of the factor exposure matrix
    to set the order of factors in the factor covariance matrix
    """
    # TODO: set the variances only
    cv = covariance[date]
    k = NCOL(B)
    Fm = np.zeros([k,k])
    for j in range(0,k): 
        fac = colnames(B)[j]
        Fm[j,j] = # ...
    return(Fm)
```


```python
## factor variances 
# gets factor vars into diagonal matrix
# takes B to know column names of B; F will be multipled by B later
# F is square; so row and col names must match column names of B.
F = diagonal_factor_cov(date, B)
```


```python
F.shape
```

Note how the off diagonals are all set to zero.

## alpha combination

As a simple alpha combination, combine the alphas with equal weight.  In the project, you're welcome to try other ways to combine the alphas.  For example, you could calculate some metric for each factor, which indicates which factor should be given more or less weight.

## Scale factor exposures 

Note that the terms that we're calculating for the objective function will be in dollar units.  So the expected return $-\alpha^T h$ will be in dollar units.  The $h$ vector of portfolio holdings will be in dollar units.  The vector of alpha factor exposures $\alpha$ will represent the percent change expected for each stock.  Based on the ranges of values in the factor exposure data, which are mostly between -5 and +5 and centered at zero, **we'll make an assumption that a factor exposure of 1 maps to 1 basis point of daily return on that stock.**

So we'll convert the factor values into decimals: 1 factor exposure value $\rightarrow \frac{1}{10,000}$ in daily returns.  In other words, we'll rescale the alpha factors by dividing by 10,000.

This is to make the term representing the portfolio's expected return $\alpha^T h$ be scaled so that it represents dollar units.


```python
alpha_factors
```


```python
def model_matrix(formula, data): 
    outcome, predictors = patsy.dmatrices(formula, data)
    return(predictors)
```


```python
## matrix of alpha factors
B_alpha = model_matrix(get_formula(alpha_factors, "SpecRisk"), data = universe)
```


```python
B_alpha
```

## Quiz

Sum across the rows, then re-scale so that the expression $\mathbf{\alpha}^T \mathbf{h}$ is in dollar units.


```python
def rowSums(m): 
    # TODO
    return(np.sum(m, axis="""<your code here>"""))
```


```python
# TODO
scale = # ...
alpha_vec = scale * rowSums(B_alpha) #sum across rows (collapse 4 columns into one)
```


```python
alpha_vec.shape
```

## Original method of calculating common risk term

Recall that the common risk term looks like this:
$\textbf{h}^T\textbf{BFB}^T\textbf{h}$

Where h is the vector of portfolio holdings, B is the factor exposure matrix, and F is the factor covariance matrix.

We'll walk through this calculation to show how it forms an N by N matrix, which is computationally expensive, and may lead to memory overflow for large values of N.


```python
np.dot( np.dot( h.T, np.matmul( np.matmul(B,F),BT) ), h)
```


```python
tmp = np.matmul(B,F)
tmp.shape
```


```python
# this makes an N by matrix (large)
tmp = np.matmul(tmp,BT)
tmp.shape
```


```python
tmp = np.matmul(h.T,tmp)
tmp.shape
```


```python
tmp = np.dot(tmp,h)
tmp.shape
```


```python
tmp
```

## Efficiently calculate common risk term (avoid N by N matrix)

Calculate the portfolio risk that is attributable to the risk factors:
$\mathbf{h}^T\mathbf{BFB}^T\mathbf{h}$

Note that this can become computationally infeasible and/or slow.  Use matrix factorization and carefully choose the order of matrix multiplications to avoid creating an N by N matrix.

#### square root of a matrix.

We can find a matrix $\mathbf{B}$ that's the matrix square root of another matrix $\mathbf{A}$, which means that if we matrix multiply $\mathbf{BB}$, we'd get back to the original matrix $\mathbf{A}$.

Find $\mathbf{Q}$ such that $\mathbf{Q}^T\mathbf{Q}$ is the same as $\mathbf{BFB}^T$.  Let's let $\mathbf{G}$ denote the square root of matrix $\mathbf{F}$, so that $\mathbf{GG} = \mathbf{F}$.

Then the expression for the covariance matrix of assets, $\mathbf{BFB}^T$, can be written as $\mathbf{BGGB}^T$.  

Let's let $\mathbf{Q}=\mathbf{GB}^T$ and let $\mathbf{Q}^T=\mathbf{BG}$, which means we can rewrite $\mathbf{BGGB}^T = \mathbf{Q}^T\mathbf{Q}$, and the common risk term is $\mathbf{h}^T\mathbf{Q}^T\mathbf{Qh}$

Also, note that we don't have to calculate $\mathbf{BFB}^T$ explicitly, because the actual value we wish to calculate in the objective function will apply the holdings $\mathbf{h}$ to the covariance matrix of assets.

## Quiz: matrix square root of F

We'll call this square root matrix $\mathbf{G}$

Use [scipy.linalg.sqrtm](https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.linalg.sqrtm.html)



```python
# TODO
G = # ...
```


```python
G.shape
```

Double check that multiplying the square root matrix to itself returns us back to the original matrix of factor variances.


```python
np.matmul(G,G) - F
```

## Quiz: calculate $\textbf{Q}$ and $\textbf{Q}^T$


```python
# TODO
# Q = GB'
# Q should be a short and wide matrix
Q = # ...
Q.shape
```


```python
# TODO
# Q' = BG
# Q should be a tall and narrow matrix
QT = # ...
QT.shape
```


```python
# notice we could also use the transpose of Q to get Q'
QT - Q.transpose()
```

## Quiz: Include portfolio holdings

So the original formula of 
$h^TBFB^Th$ became  
$h^TBGGB^Th$, where $GG = F$.  

And then, if we let $Q^T=BG$ and $Q = GB^T$:  
$h^TQ^TQh$


Let $R = Q h$ and $R^T = h^T Q^T$:  

The risk term becomes:  
$R^TR$, where $R^T=h^TQ$ and $R=Q^Th$

So an important point here is that we don't want to multiply $Q^TQ$ itself, because this creates the large N by N matrix. We want to multiply $h^TQ^T$ and $Qh$ separately, creating vectors of length k (k is number of risk factors).


```python
# TODO
# R = Qh
R = # ...
R.shape
```


```python
# TODO
# R' = Q'h'
RT = # ...
RT.shape
```

## Notice how we avoided creating a full N by N matrix

Also, notice that if we have Q, we can take its transpose to get $Q^T$ instead of doing the matrix multiplication.  

Similarly, if we have R, which is a vector, we notice that $R^TR$ is the same as taking the dot product.  In other words, it's squaring each element in the vector R, and adding up all the squared values.

$R^TR = \sum_{i}^{k}(r_i^2)$

## Quiz: Put it all together: calculate common risk term efficiently


```python
## TODO: common risk term in term

# TODO: calculate square root of F
G = # ...

# TODO: calculate Q
Q = # ...

# TODO: calculate R
R = # ...

# TODO: calculate common risk term
common_risk = # ...
```

## Specific Risk term

The portfolio's variance that is specific to each asset is found by combining the holdings with the specific variance matrix: 

$h^TSh$, where $h^T$ is a 1 by N vector, S is an N by N matrix, and h is an N by 1 vector.

Recall that S is a diagonal matrix, so all the off-diagonals are zero.  So instead of doing the matrix multiplication, we could save computation by working with the vector containing the diagonal values.

$h^TSh = \sum_i^{N}(h_i^2 \times S_i)$ because $S$ is a diagonal matrix.


```python
## check the unit of measure of SpecRisk
# Notice that these are in percent; multiply by .01 to get them back to decimals.aa
universe['SpecRisk'][0:2] 
```

## Quiz: Specific Risk term

Given specific risk (volatility), calculate specific variance.  First re-scale the specific risk data so that it's in decimal instead of percent.


```python
## TODO: specific variance : rescale it and then square to get specific variance
specVar = # ...

# TODO: specific risk term (include holdings)
spec_risk_term = np.dot("""<your code here>""", """<your code here>""")
```

## Maximize portfolio returns

Since the alpha vector $\mathbf{\alpha}$ is supposed to be indicative of future asset returns, when we look at a portfolio of assets, the weighted sum of these alphas $\mathbf{\alpha}^T \mathbf{h}$ is predictive of the portfolio's future returns.  We want to maximize the portfolio's expected future returns, so we want to minimize the negative of portfolio's expected returns $-\mathbf{\alpha}^T \mathbf{h}$


```python
## TODO
expected_return = # ...
```

## Linear price impact of trading

Assume transaction cost is linearly related to the trade size as a fraction of the average daily volume.  Since we won't know the actual daily volume until the day that we're executing, we want to use past data as an estimate for future daily volume.  This would be kind of noisy if we simply use the prior day's daily volume, so we'd prefer a more stable estimate like a 30 day rolling average.

A commonly used **estimate for linear market impact is that if a trade size is 1% of the ADV, this moves the price by 10 basis points (1/10,000).**

$Trade size_{i,t}$ is the fraction of your trade relative to the average dollar volume estimated for that stock, for that day. 

$Trade_{i,t}$ = dollar amount to trade = $h_{t} - h_{t-1}$, which is the new holding of the asset minus the previous holding.

$ADV_{i,t}$: (average dollar volume) is total dollar amount expected to be traded, based on a moving average of historical daily volume.

$TradeSize_{i,t} = \frac{Trade_{i,t}}{ADV_{i,t}}$: The size of the trade relative to the estimated daily volume.

$\% \Delta Price_{i,t}$ = price change due to trading, as a fraction of the original price (it's a percent change).

We'll write out the ratio: change in price divided by the trade size.

$ \frac{\% \Delta price_{i,t}}{TradeSize_{i,t}} = \frac{10 bps}{1\%}$  

$ \frac{\% \Delta price_{i,t}}{TradeSize_{i,t}} = \frac{10/10^4}{1/100}$

$ \frac{\% \Delta price_{i,t}}{TradeSize_{i,t}} = \frac{10^{-3}}{10^{-2}}$

$ \frac{\% \Delta price_{i,t}}{TradeSize_{i,t}} = 10^{-1}$

Now we'll move things around to solve for the change in price.

$\%  \Delta price_{i,t} = 10^{-1} \times TradeSize_{i,t}$

We defined TradeSize to be the Trade divided by ADV.

$\%  \Delta price_{i,t} = 10^{-1} \times \frac{Trade_{i,t}}{ADV_{i,t}}$

Note that Trade is the current position minus the prior day's position

$\%  \Delta price_{i,t} = 10^{-1} \times \frac{h_{i,t} - h_{i,t-1}}{ADV_{i,t}}$

For convenience, we'll combine the constant $10^{-1}$ and $\frac{1}{ADV_{i}}$ and call it lambda $\lambda_{i}$

$\%  \Delta price_{i,t} = \lambda_{i,t} \times (h_{i,t} - h_{i,t-1})$ where $\lambda_{i,t} = 10^{-1}\times \frac{1}{ADV_{i,t}} = \frac{1}{10 \times ADV_{i,t}}$


Note that since we're dividing by $ADV_{i,t}$, we'll want to handle cases when $ADV_{i,t}$ is missing or zero.  In those instances, we can set $ADV_{i,t}$ to a small positive number, such as 10,000, which, in practice assumes that the stock is illiquid.

Represent the market impact as $\Delta price_{i} = \lambda_{i} (h_{i,t} - h_{i,t-1})$.  $\lambda_{i}$ incorporates the $ADV_{i,t}$.  Review the lessons to see how to do this.

Note that since we're dividing by $ADV_{i,t}$, we'll want to handle cases when $ADV_{i,t}$ is missing or zero.  In those instances, we can set $ADV_{i,t}$ to a small positive number, such as 10,000, which, in practice assumes that the stock is illiquid.

## Quiz

If the ADV field is missing or zero, set it to 10,000.


```python
# TODO: if missing, set to 10000
universe.loc[np.isnan(universe["""<your code here>"""]), 'ADTCA_30'] = """<your code here>""" ## assume illiquid if no volume information

# TODO: if zero, set to 10000
universe.loc[universe['ADTCA_30'] == """<your code here>""", 'ADTCA_30'] = """<your code here>""" ## assume illiquid if no volume information


```

## Quiz: calculate Lambda


```python
# TODO
adv = # ...
Lambda = # ...
```

## Quiz: transaction cost term

Transaction cost is change in price times dollar amount traded.  For a single asset "i":

$tcost_{i,t} = (\% \Delta price_{i,t}) \times (DollarsTraded_{i,t})$

$tcost_{i,t} = (\lambda_{i,t} \times (h_{i,t} - h_{i,t-1}) ) \times (h_{i,t} - h_{i,t-1})$

Notice that we can simplify the notation so it looks like this:

$tcost_{i,t} = \lambda_{i,t} \times (h_{i,t} - h_{i,t-1})^2$

The transaction cost term to be minimized (for all assets) is:

$tcost_{t} = \sum_i^{N} \lambda_{i,t} (h_{i,t} - h_{i,t-1})^2$  
where $\lambda_{i,t} = \frac{1}{10\times ADV_{i,t}}$

For matrix notation, we'll use a capital Lambda, $\Lambda_{t}$, instead of the lowercase lambda $\lambda_{i,t}$.

$tcost_{t} = (\mathbf{h}_{t} - \mathbf{h}_{t-1})^T \mathbf{\Lambda}_t (\mathbf{h}_{t} - \mathbf{h}_{t-1})$

Note that we'll pass in a vector of holdings as a numpy array.  For practice, we'll use the h variable that is initialized to zero.


```python
# TODO
tcost = # ...
```

## objective function

Combine the common risk, idiosyncratic risk, transaction costs and expected portfolio return into the objective function.  Put this inside a function.

Objective function is:  
factor risk + idiosyncratic risk - expected portfolio return + transaction costs  
$f(\mathbf{h}) = \frac{1}{2}\kappa \mathbf{h}_t^T\mathbf{Q}^T\mathbf{Q}\mathbf{h}_t + \frac{1}{2} \kappa \mathbf{h}_t^T \mathbf{S} \mathbf{h}_t - \mathbf{\alpha}^T \mathbf{h}_t + (\mathbf{h}_{t} - \mathbf{h}_{t-1})^T \mathbf{\Lambda} (\mathbf{h}_{t} - \mathbf{h}_{t-1})$


## Risk Aversion $\kappa$

The risk aversion term is set to target a particular gross market value (GMV), or to target a desired volatility.  In our case, we tried a few values of the risk aversion term, ran the backtest, and calculated the GMV.  Ideally, a quant who is just starting out may have a targeted GMV of 50 million.  A risk aversion term of $10^{-6}$ gets the GMV to be in the tens of millions.  A higher risk aversion term would decrease the GMV, and a lower risk aversion term would increase the GMV, and also the risk.  Note that this isn't necessarily a linear mapping, so in practice, you'll try different values and check the results.

Also, in practice, you'd normally keep the risk aversion term constant, unless your fund is accepting more investor cash, or handling redemptions.  In those instances, the fund size itself changes, so the targeted GMV also changes.  Therefore, we'd adjust the risk aversion term to adjust for the desired GMV. 

Also, note that we would keep this risk aversion term constant, and not adjust it on a daily basis.  Adjusting the risk aversion term too often would result in unecessary trading that isn't informed by the alphas.

## Quiz
An important point is to think about what matrices can be multiplied independently of the vector of asset holdings, because those can be done once outside of the objective function.  The rest of the objective function that depends on the holdings vector will be evaluated inside the objective function multiple times by the optimizer, as it searches for the optimal holdings.  


For instance, 

$\mathbf{h}^T\mathbf{BFB}^T\mathbf{h}$ became  
$\mathbf{h}^T\mathbf{BGGB}^T\mathbf{h}$, where $\mathbf{GG} = \mathbf{F}$.  

And then, if we let $\mathbf{Q}^T=\mathbf{BG}$ and $\mathbf{Q} = \mathbf{GB}^T$:  
$\mathbf{h}^T\mathbf{Q}^T\mathbf{Qh}$

Let $\mathbf{R} = \mathbf{Q h}$ and $\mathbf{R}^T = \mathbf{h}^T \mathbf{Q}^T$:  

The risk term becomes:  
$\mathbf{R}^T\mathbf{R}$, where $\mathbf{R}^T=\mathbf{h}^T\mathbf{Q}$ and $\mathbf{R}=\mathbf{Q}^T\mathbf{h}$

* Can we pre-compute Q outside of the objective function?  
* Can we pre-compute R outside of the objective function?

#### Answer
Q doesn't depend on h, the holdings vector, so it can be pre-computed once outside of the objective function.

R is created using h, the holdings vector.  This should be computed each time the objective function is called, not pre-computed beforehand.

## Risk Aversion parameter

The risk aversion term is set to target a particular gross market value (GMV), or to target a desired volatility.  

The gross market value is the dollar value of the absolute value of the long and short positions.

$ GMV = \sum_i^N(|h_{i,t}|)$

When we think about what it means to take more risk when investing, taking bigger bets with more money is a way to take on more risk.  So the risk aversion term controls how much risk we take by controlling the dollar amount of our positions, which is the gross market value.

In our case, we tried a few values of the risk aversion term, ran the backtest, and calculated the GMV.  Ideally, a quant who is just starting out may have a targeted book size of 50 million.  In other words, they try to keep their GMV around 50 million.  

A risk aversion term of $10^{-6}$ gets the GMV to be in the tens of millions.  A higher risk aversion term would decrease the GMV, and a lower risk aversion term would increase the GMV, and also the risk.  Note that this isn't necessarily a linear mapping, so in practice, you'll try different values and check the results.

Also, in practice, you'd normally keep the risk aversion term constant, unless your fund is accepting more investor cash, or handling redemptions.  In those instances, the fund size itself changes, so the targeted GMV also changes.  Therefore, we'd adjust the risk aversion term to adjust for the desired GMV. 

Also, note that we would keep this risk aversion term constant, and not adjust it on a daily basis.  Adjusting the risk aversion term too often would result in unnecessary trading that isn't informed by the alphas.



```python
## Risk aversion
risk_aversion=1.0e-6
```

## Quiz: define objective function

Combine the common risk, idiosyncratic risk, transaction costs and expected portfolio return into the objective function.  Put this inside a function.

Objective function is:  
factor risk + idiosyncratic risk - expected portfolio return + transaction costs  
$f(\mathbf{h}) = \frac{1}{2}\kappa \mathbf{h}_t^T\mathbf{Q}^T\mathbf{Q}\mathbf{h}_t + \frac{1}{2} \kappa \mathbf{h}_t^T \mathbf{S} \mathbf{h}_t - \mathbf{\alpha}^T \mathbf{h}_t + (\mathbf{h}_{t} - \mathbf{h}_{t-1})^T \mathbf{\Lambda} (\mathbf{h}_{t} - \mathbf{h}_{t-1})$



```python
def func(h): 
    # TODO: define the objective function, where h is the vector of asset holdings
    f = # ...
    return(f)
```

## Gradient

Before, when we used cvxpy, we didn't have to calculate the gradient, because the library did that for us.

Objective function is:  
factor risk + idiosyncratic risk - expected portfolio return + transaction costs  
$f(\mathbf{h}) = \frac{1}{2}\kappa \mathbf{h}^T\mathbf{Q}^T\mathbf{Qh} + \frac{1}{2} \kappa \mathbf{h}^T \mathbf{S h} - \mathbf{\alpha^T h} + (\mathbf{h}_{t} - \mathbf{h}_{t-1})^T \Lambda (\mathbf{h}_{t} - \mathbf{h}_{t-1})$


Let's think about the shape of the resulting gradient. The reason we're interested in calculating the derivative is so that we can tell the optimizer in which direction, and how much, it should shift the portfolio holdings in order to improve the objective function (minimize variance, minimize transaction cost, and maximize expected portfolio return).  So we want to calculate a derivative for each of the N assets (about 2000+ in our defined universe).  So the resulting gradient will be a row vector of length N.

The gradient, or derivative of the objective function, with respect to the portfolio holdings h, is:  

$f'(\mathbf{h}) = \frac{1}{2}\kappa (2\mathbf{Q}^T\mathbf{Qh}) + \frac{1}{2}\kappa (2\mathbf{Sh}) - \mathbf{\alpha} + 2(\mathbf{h}_{t} - \mathbf{h}_{t-1}) \mathbf{\Lambda}$

We can check that each of these terms is a row vector with one value for each asset (1 by N row vector)

## Quiz

Calculate the gradient of the common risk term:

$\kappa (\mathbf{Q}^T\mathbf{Qh})$


```python
# TODO: gradient of common risk term
tmp = risk_aversion * np.matmul("""<your code here>""", np.matmul("""<your code here>""","""<your code here>"""))
```

Verify that the calculation returns one value for each asset in the stock universe (about 2000+ )


```python
tmp.shape
```

## Quiz

Calculate gradient of idiosyncratic risk term

$\kappa (\mathbf{Sh})$


```python
# TODO: idiosyncratic risk gradient
tmp = """<your code here>""" * """<your code here>""" * """<your code here>"""
```


```python
tmp.shape
```

## Quiz

Calculate the gradient of the expected return

$- \mathbf{\alpha} $


```python
# TODO: expected return gradient
tmp = -"""<your code here>"""
```


```python
tmp.shape
```

## Quiz

Calculate the gradient of the transaction cost.

$ 2(\mathbf{h}_{t} - \mathbf{h}_{t-1}) \mathbf{\Lambda}$


```python
# transaction cost
tmp = 2 * """<your code here>""" * """<your code here>"""
```


```python
tmp.shape
```

## Quiz: Define gradient function

Put this all together to define the gradient function.  The optimizer will use this to make small adjustments to the portfolio holdings.

#### gradient (slightly cleaned up)

We'll simplify the expression a bit by pulling the common $\kappa$ out of the common risk and specific risk.  Also, the 1/2 and 2 cancel for both risk terms.

$f'(\mathbf{h}) = \frac{1}{2}\kappa (2\mathbf{Q}^T\mathbf{Qh}) + \frac{1}{2}\kappa (2\mathbf{h}^T\mathbf{S}) - \mathbf{\alpha} + 2(\mathbf{h}_{t} - \mathbf{h}_{t-1})\cdot \Lambda$

becomes

$f'(\mathbf{h}) = \kappa (\mathbf{Q}^T\mathbf{Qh} + \mathbf{Sh}) - \mathbf{\alpha} + 2(\mathbf{h}_{t} - \mathbf{h}_{t-1}) \mathbf{\Lambda}$


```python
# Solution
def grad(x):
    # TODO
    g = # ...
    return(np.asarray(g))
```

## Optimizer

Choose an optimizer.  You can read about these optimizers:

* L-BFGS  
* Powell
* Nelder-Mead
* Conjugate Gradient

In this [page about math optimization](http://scipy-lectures.org/advanced/mathematical_optimization/)

Also read the [scipy.optimize documentation](https://docs.scipy.org/doc/scipy/reference/optimize.html)

Pass in the objective function, prior day's portfolio holdings, and the gradient.


```python
# TODO
optimizer_result = scipy.optimize.fmin_l_bfgs_b("""<your code here>""", """<your code here>""", fprime="""<your code here>""")

h1 = optimizer_result[0]
```


```python
opt_portfolio = pd.DataFrame(data = {"Barrid" : universe['Barrid'], "h.opt" : h1})
```


```python
opt_portfolio.head()
```

## risk exposures
factor exposures times the portfolio holdings for each asset, gives the portfolio's exposure to the factors (portfolio's risk exposure).

$\mathbf{B}^T\mathbf{h}$


```python
# TODO: risk exposures
risk_exposures = np.matmul("""<your code here>""", """<your code here>""")

# put this into a pandas series
pd.Series(risk_exposures, index = colnames(B))
```

## Quiz: alpha exposures

The portfolio's exposures to the alpha factors is equal to the matrix of alpha exposures times the portfolio holdings.  We'll use the holdings returned by the optimizer.

$\textbf{B}_{\alpha}^T\mathbf{h}$


```python
# Solution: portfolio's alpha exposure
alpha_exposures = np.matmul("""<your code here>""", """<your code here>""")

# put into a pandas series
pd.Series(alpha_exposures, index = colnames(B_alpha))
```

## Hints for the project

You'll be putting this optimization code into functions so that you can call the optimizer in a loop, as the backtester walks through each day in the data.

## Solution notebook

The solution notebook is [here](optimization_with_tcosts_solution.ipynb)


```python

```
